
STM32 Midi Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008144  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c4  080082c4  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080082c4  080082c4  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082c4  080082c4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080082cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f8  20000190  0800845c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001488  0800845c  00021488  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a85a  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000347f  00000000  00000000  0003aa13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001408  00000000  00000000  0003de98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  0003f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b52b  00000000  00000000  00040548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c87  00000000  00000000  0005ba73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094312  00000000  00000000  0006e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102a0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053d0  00000000  00000000  00102a88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000190 	.word	0x20000190
 8000128:	00000000 	.word	0x00000000
 800012c:	08008238 	.word	0x08008238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000194 	.word	0x20000194
 8000148:	08008238 	.word	0x08008238

0800014c <DWT_Delay_Init>:
	GPIOA->BRR = (1<<7);
}

/* DWT based delay */
uint32_t DWT_Delay_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000150:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800015c:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <DWT_Delay_Init+0x58>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	4a10      	ldr	r2, [pc, #64]	; (80001a4 <DWT_Delay_Init+0x58>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000168:	4b0f      	ldr	r3, [pc, #60]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0e      	ldr	r2, [pc, #56]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800016e:	f023 0301 	bic.w	r3, r3, #1
 8000172:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <DWT_Delay_Init+0x5c>)
 8000182:	2200      	movs	r2, #0
 8000184:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000186:	bf00      	nop
    __ASM volatile ("NOP");
 8000188:	bf00      	nop
    __ASM volatile ("NOP");
 800018a:	bf00      	nop
    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <DWT_Delay_Init+0x5c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000194:	2300      	movs	r3, #0
 8000196:	e000      	b.n	800019a <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000198:	2301      	movs	r3, #1
    }
}
 800019a:	4618      	mov	r0, r3
 800019c:	46bd      	mov	sp, r7
 800019e:	bc80      	pop	{r7}
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	e000edf0 	.word	0xe000edf0
 80001a8:	e0001000 	.word	0xe0001000

080001ac <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80001b4:	4b0e      	ldr	r3, [pc, #56]	; (80001f0 <DWT_Delay_us+0x44>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80001ba:	f003 fb23 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <DWT_Delay_us+0x48>)
 80001c2:	fba3 2302 	umull	r2, r3, r3, r2
 80001c6:	0c9b      	lsrs	r3, r3, #18
 80001c8:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	68ba      	ldr	r2, [r7, #8]
 80001ce:	fb02 f303 	mul.w	r3, r2, r3
 80001d2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 80001d4:	bf00      	nop
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <DWT_Delay_us+0x44>)
 80001d8:	685a      	ldr	r2, [r3, #4]
 80001da:	68fb      	ldr	r3, [r7, #12]
 80001dc:	1ad2      	subs	r2, r2, r3
 80001de:	6879      	ldr	r1, [r7, #4]
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	1acb      	subs	r3, r1, r3
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d3f6      	bcc.n	80001d6 <DWT_Delay_us+0x2a>
}
 80001e8:	bf00      	nop
 80001ea:	3710      	adds	r7, #16
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	e0001000 	.word	0xe0001000
 80001f4:	431bde83 	.word	0x431bde83

080001f8 <MCP23017SetPin>:

//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

/* MCP23017 Defines */

void MCP23017SetPin(uint8_t pin, bank b, uint8_t addr){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	460b      	mov	r3, r1
 8000204:	71bb      	strb	r3, [r7, #6]
 8000206:	4613      	mov	r3, r2
 8000208:	717b      	strb	r3, [r7, #5]

	GPIOA->BSRR = (1<<7);
 800020a:	4b3e      	ldr	r3, [pc, #248]	; (8000304 <MCP23017SetPin+0x10c>)
 800020c:	2280      	movs	r2, #128	; 0x80
 800020e:	611a      	str	r2, [r3, #16]

	currentIOState[b] |= (1<<pin);
 8000210:	79bb      	ldrb	r3, [r7, #6]
 8000212:	4a3d      	ldr	r2, [pc, #244]	; (8000308 <MCP23017SetPin+0x110>)
 8000214:	5cd3      	ldrb	r3, [r2, r3]
 8000216:	b25a      	sxtb	r2, r3
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2101      	movs	r1, #1
 800021c:	fa01 f303 	lsl.w	r3, r1, r3
 8000220:	b25b      	sxtb	r3, r3
 8000222:	4313      	orrs	r3, r2
 8000224:	b25a      	sxtb	r2, r3
 8000226:	79bb      	ldrb	r3, [r7, #6]
 8000228:	b2d1      	uxtb	r1, r2
 800022a:	4a37      	ldr	r2, [pc, #220]	; (8000308 <MCP23017SetPin+0x110>)
 800022c:	54d1      	strb	r1, [r2, r3]
	//I think I know the problem here, the start condition is sent, then the interrupt fires, then I2C DR has yet to be written, so the entire thing crashes in a pile of flames. It looks like the interrupt routine is plenty fast when compared to a full byte transfer, but just too long to squeeze into a start condition. YUP, CONFIRMED THAT IT GETS STUCK WAITING FOR THE ADDRESS FLAG, IE the address flag is not set!
	//write out the new state
	//UPDATE: This messses up the BAM Driver... I think it'll be better just to stop TIM2
	//__disable_irq(); //the entire routine will be super duper unhappy unless this is in place
	//TODO: investigate what happens if we disable irq, since the blocking code is already in place
	TIM2->CR1 &= ~1; //disable BAM Driver
 800022e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000238:	f023 0301 	bic.w	r3, r3, #1
 800023c:	6013      	str	r3, [r2, #0]
	I2C2->CR1 |= (1<<8); //send start condition
 800023e:	4b33      	ldr	r3, [pc, #204]	; (800030c <MCP23017SetPin+0x114>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a32      	ldr	r2, [pc, #200]	; (800030c <MCP23017SetPin+0x114>)
 8000244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000248:	6013      	str	r3, [r2, #0]
	while ((I2C2->SR1 & 1) == 0); //clear SB
 800024a:	bf00      	nop
 800024c:	4b2f      	ldr	r3, [pc, #188]	; (800030c <MCP23017SetPin+0x114>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0f9      	beq.n	800024c <MCP23017SetPin+0x54>
	I2C2->DR = addr; //address the MCP23017
 8000258:	4a2c      	ldr	r2, [pc, #176]	; (800030c <MCP23017SetPin+0x114>)
 800025a:	797b      	ldrb	r3, [r7, #5]
 800025c:	6113      	str	r3, [r2, #16]
	//__enable_irq(); didn't work here
	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 800025e:	bf00      	nop
 8000260:	4b2a      	ldr	r3, [pc, #168]	; (800030c <MCP23017SetPin+0x114>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	f003 0302 	and.w	r3, r3, #2
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <MCP23017SetPin+0x68>
	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 800026c:	bf00      	nop
 800026e:	4b27      	ldr	r3, [pc, #156]	; (800030c <MCP23017SetPin+0x114>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <MCP23017SetPin+0x76>

	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800027a:	bf00      	nop
 800027c:	4b23      	ldr	r3, [pc, #140]	; (800030c <MCP23017SetPin+0x114>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f9      	beq.n	800027c <MCP23017SetPin+0x84>
	if(b==A){
 8000288:	79bb      	ldrb	r3, [r7, #6]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d103      	bne.n	8000296 <MCP23017SetPin+0x9e>
		I2C2->DR = 0x14;
 800028e:	4b1f      	ldr	r3, [pc, #124]	; (800030c <MCP23017SetPin+0x114>)
 8000290:	2214      	movs	r2, #20
 8000292:	611a      	str	r2, [r3, #16]
 8000294:	e002      	b.n	800029c <MCP23017SetPin+0xa4>
	}
	else{
		I2C2->DR = 0x15;
 8000296:	4b1d      	ldr	r3, [pc, #116]	; (800030c <MCP23017SetPin+0x114>)
 8000298:	2215      	movs	r2, #21
 800029a:	611a      	str	r2, [r3, #16]
	}
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 800029c:	bf00      	nop
 800029e:	4b1b      	ldr	r3, [pc, #108]	; (800030c <MCP23017SetPin+0x114>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <MCP23017SetPin+0xa6>
	I2C2->DR = currentIOState[b]; //just pull everything low
 80002aa:	79bb      	ldrb	r3, [r7, #6]
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <MCP23017SetPin+0x110>)
 80002ae:	5cd2      	ldrb	r2, [r2, r3]
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <MCP23017SetPin+0x114>)
 80002b2:	611a      	str	r2, [r3, #16]
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80002b4:	bf00      	nop
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <MCP23017SetPin+0x114>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <MCP23017SetPin+0xbe>
	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80002c2:	bf00      	nop
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <MCP23017SetPin+0x114>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <MCP23017SetPin+0xcc>
	I2C2->CR1 |= (1<<9); //send stop condition
 80002d0:	4b0e      	ldr	r3, [pc, #56]	; (800030c <MCP23017SetPin+0x114>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <MCP23017SetPin+0x114>)
 80002d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002da:	6013      	str	r3, [r2, #0]

	while ((I2C2->SR2 & (1<<1)) == 1); //make damn sure the I2C bus is free
 80002dc:	bf00      	nop
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <MCP23017SetPin+0x114>)
 80002e0:	699b      	ldr	r3, [r3, #24]
	TIM2->CR1 |= 1; //enable BAM Driver
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
	//__enable_irq();
	GPIOA->BRR = (1<<7);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <MCP23017SetPin+0x10c>)
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	615a      	str	r2, [r3, #20]

}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40010800 	.word	0x40010800
 8000308:	200001c0 	.word	0x200001c0
 800030c:	40005800 	.word	0x40005800

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 fd02 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f892 	bl	8000440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f9f8 	bl	8000710 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000320:	f007 fae8 	bl	80078f4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000324:	f000 f8f6 	bl	8000514 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000328:	f000 f932 	bl	8000590 <MX_I2C1_Init>
  MX_I2C2_Init();
 800032c:	f000 f95e 	bl	80005ec <MX_I2C2_Init>
  MX_TIM2_Init();
 8000330:	f000 f98a 	bl	8000648 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000334:	f000 f8e1 	bl	80004fa <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000338:	f7ff ff08 	bl	800014c <DWT_Delay_Init>

  I2C2->CR1 |= 1; //enable i2c 2 peripheral for LCD and EEPROM
 800033c:	4b3c      	ldr	r3, [pc, #240]	; (8000430 <main+0x120>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a3b      	ldr	r2, [pc, #236]	; (8000430 <main+0x120>)
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]

  //Initialise the MCP23017 first
  	I2C2->CR1 |= (1<<8); //send start condition
 8000348:	4b39      	ldr	r3, [pc, #228]	; (8000430 <main+0x120>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a38      	ldr	r2, [pc, #224]	; (8000430 <main+0x120>)
 800034e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000352:	6013      	str	r3, [r2, #0]
  	while ((I2C2->SR1 & 1) == 0); //clear SB
 8000354:	bf00      	nop
 8000356:	4b36      	ldr	r3, [pc, #216]	; (8000430 <main+0x120>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f9      	beq.n	8000356 <main+0x46>
  	I2C2->DR = LCD_Address; //address the MCP23017
 8000362:	4b33      	ldr	r3, [pc, #204]	; (8000430 <main+0x120>)
 8000364:	224e      	movs	r2, #78	; 0x4e
 8000366:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<1)) == 0); //wait for ADDR flag
 8000368:	bf00      	nop
 800036a:	4b31      	ldr	r3, [pc, #196]	; (8000430 <main+0x120>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <main+0x5a>
  	while ((I2C2->SR2 & (1<<2)) == 0); //read I2C SR2
 8000376:	bf00      	nop
 8000378:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <main+0x120>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f9      	beq.n	8000378 <main+0x68>
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000384:	bf00      	nop
 8000386:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <main+0x120>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0f9      	beq.n	8000386 <main+0x76>
  	I2C2->DR = 0x00; //write to IODIR_A
 8000392:	4b27      	ldr	r3, [pc, #156]	; (8000430 <main+0x120>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 8000398:	bf00      	nop
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <main+0x120>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <main+0x8a>
  	I2C2->DR = 0x00; //all outputs
 80003a6:	4b22      	ldr	r3, [pc, #136]	; (8000430 <main+0x120>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003ac:	bf00      	nop
 80003ae:	4b20      	ldr	r3, [pc, #128]	; (8000430 <main+0x120>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d0f9      	beq.n	80003ae <main+0x9e>
  	I2C2->DR = 0x00; //all outputs for next address which is IODIR_B
 80003ba:	4b1d      	ldr	r3, [pc, #116]	; (8000430 <main+0x120>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure TxE is 1
 80003c0:	bf00      	nop
 80003c2:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <main+0x120>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d0f9      	beq.n	80003c2 <main+0xb2>
  	while ((I2C2->SR1 & (1<<7)) == 0); //make sure BTF is 1
 80003ce:	bf00      	nop
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <main+0x120>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0f9      	beq.n	80003d0 <main+0xc0>
  	I2C2->CR1 |= (1<<9); //send stop condition
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <main+0x120>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a13      	ldr	r2, [pc, #76]	; (8000430 <main+0x120>)
 80003e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003e6:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  brightness[0] = encoderValues[3];
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <main+0x124>)
 80003ea:	78db      	ldrb	r3, [r3, #3]
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <main+0x128>)
 80003f0:	701a      	strb	r2, [r3, #0]
	  brightness[1] = encoderValues[2];
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <main+0x124>)
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <main+0x128>)
 80003fa:	705a      	strb	r2, [r3, #1]
	  brightness[2] = encoderValues[1];
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <main+0x124>)
 80003fe:	785b      	ldrb	r3, [r3, #1]
 8000400:	b2da      	uxtb	r2, r3
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <main+0x128>)
 8000404:	709a      	strb	r2, [r3, #2]
	  brightness[3] = encoderValues[0];
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <main+0x124>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <main+0x128>)
 800040e:	70da      	strb	r2, [r3, #3]

	  //LCDShiftLeft(LCD_Address);
	  DWT_Delay_us(500);
 8000410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000414:	f7ff feca 	bl	80001ac <DWT_Delay_us>
	  if (!blocked) MCP23017SetPin(0, B, LCD_Address); //spam if not blocked
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <main+0x12c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1e2      	bne.n	80003e8 <main+0xd8>
 8000422:	224e      	movs	r2, #78	; 0x4e
 8000424:	2101      	movs	r1, #1
 8000426:	2000      	movs	r0, #0
 8000428:	f7ff fee6 	bl	80001f8 <MCP23017SetPin>
	  brightness[0] = encoderValues[3];
 800042c:	e7dc      	b.n	80003e8 <main+0xd8>
 800042e:	bf00      	nop
 8000430:	40005800 	.word	0x40005800
 8000434:	200001b8 	.word	0x200001b8
 8000438:	20000000 	.word	0x20000000
 800043c:	200001ad 	.word	0x200001ad

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b094      	sub	sp, #80	; 0x50
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044a:	2228      	movs	r2, #40	; 0x28
 800044c:	2100      	movs	r1, #0
 800044e:	4618      	mov	r0, r3
 8000450:	f007 feea 	bl	8008228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000470:	2301      	movs	r3, #1
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047e:	2301      	movs	r3, #1
 8000480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000482:	2302      	movs	r3, #2
 8000484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800048c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000490:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000496:	4618      	mov	r0, r3
 8000498:	f002 fde8 	bl	800306c <HAL_RCC_OscConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004a2:	f000 f9c7 	bl	8000834 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a6:	230f      	movs	r3, #15
 80004a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2102      	movs	r1, #2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f003 f852 	bl	800356c <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004ce:	f000 f9b1 	bl	8000834 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80004d2:	2312      	movs	r3, #18
 80004d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004dc:	2300      	movs	r3, #0
 80004de:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	4618      	mov	r0, r3
 80004e4:	f003 f9ca 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004ee:	f000 f9a1 	bl	8000834 <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	3750      	adds	r7, #80	; 0x50
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	201c      	movs	r0, #28
 8000504:	f000 ff4d 	bl	80013a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000508:	201c      	movs	r0, #28
 800050a:	f000 ff66 	bl	80013da <HAL_NVIC_EnableIRQ>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_ADC1_Init+0x74>)
 8000526:	4a19      	ldr	r2, [pc, #100]	; (800058c <MX_ADC1_Init+0x78>)
 8000528:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_ADC1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ADC1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_ADC1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_ADC1_Init+0x74>)
 800053e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000542:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <MX_ADC1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC1_Init+0x74>)
 800054c:	2201      	movs	r2, #1
 800054e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <MX_ADC1_Init+0x74>)
 8000552:	f000 fc45 	bl	8000de0 <HAL_ADC_Init>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800055c:	f000 f96a 	bl	8000834 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000564:	2301      	movs	r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4619      	mov	r1, r3
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_ADC1_Init+0x74>)
 8000572:	f000 fd0d 	bl	8000f90 <HAL_ADC_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800057c:	f000 f95a 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000580:	bf00      	nop
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000048c 	.word	0x2000048c
 800058c:	40012400 	.word	0x40012400

08000590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_I2C1_Init+0x50>)
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <MX_I2C1_Init+0x54>)
 8000598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_I2C1_Init+0x50>)
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x58>)
 800059e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ba:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005cc:	4804      	ldr	r0, [pc, #16]	; (80005e0 <MX_I2C1_Init+0x50>)
 80005ce:	f001 f891 	bl	80016f4 <HAL_I2C_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005d8:	f000 f92c 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200003e4 	.word	0x200003e4
 80005e4:	40005400 	.word	0x40005400
 80005e8:	00061a80 	.word	0x00061a80

080005ec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C2_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C2_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C2_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C2_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C2_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C2_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C2_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C2_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C2_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C2_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C2_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C2_Init+0x50>)
 800062a:	f001 f863 	bl	80016f4 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f8fe 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000438 	.word	0x20000438
 8000640:	40005800 	.word	0x40005800
 8000644:	00061a80 	.word	0x00061a80

08000648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	463b      	mov	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_TIM2_Init+0xc4>)
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800066c:	4b27      	ldr	r3, [pc, #156]	; (800070c <MX_TIM2_Init+0xc4>)
 800066e:	2201      	movs	r2, #1
 8000670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_TIM2_Init+0xc4>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 8000678:	4b24      	ldr	r3, [pc, #144]	; (800070c <MX_TIM2_Init+0xc4>)
 800067a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800067e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_TIM2_Init+0xc4>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_TIM2_Init+0xc4>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800068c:	481f      	ldr	r0, [pc, #124]	; (800070c <MX_TIM2_Init+0xc4>)
 800068e:	f003 f9ab 	bl	80039e8 <HAL_TIM_Base_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000698:	f000 f8cc 	bl	8000834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4619      	mov	r1, r3
 80006a8:	4818      	ldr	r0, [pc, #96]	; (800070c <MX_TIM2_Init+0xc4>)
 80006aa:	f003 faf4 	bl	8003c96 <HAL_TIM_ConfigClockSource>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006b4:	f000 f8be 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <MX_TIM2_Init+0xc4>)
 80006c6:	f003 fcc3 	bl	8004050 <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006d0:	f000 f8b0 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIM2->CR1 &= ~(1<<1); //Clear the UDIS bit to ensure the BAM Interrupt is triggered
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	f023 0302 	bic.w	r3, r3, #2
 80006e2:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= 1; //Update interrupt enable
 80006e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	60d3      	str	r3, [r2, #12]
  TIM2->CR1 |= 1; //enable BAM Driver
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200004bc 	.word	0x200004bc

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b3f      	ldr	r3, [pc, #252]	; (8000824 <MX_GPIO_Init+0x114>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a3e      	ldr	r2, [pc, #248]	; (8000824 <MX_GPIO_Init+0x114>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <MX_GPIO_Init+0x114>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073c:	4b39      	ldr	r3, [pc, #228]	; (8000824 <MX_GPIO_Init+0x114>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a38      	ldr	r2, [pc, #224]	; (8000824 <MX_GPIO_Init+0x114>)
 8000742:	f043 0320 	orr.w	r3, r3, #32
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b36      	ldr	r3, [pc, #216]	; (8000824 <MX_GPIO_Init+0x114>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0320 	and.w	r3, r3, #32
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b33      	ldr	r3, [pc, #204]	; (8000824 <MX_GPIO_Init+0x114>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a32      	ldr	r2, [pc, #200]	; (8000824 <MX_GPIO_Init+0x114>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b30      	ldr	r3, [pc, #192]	; (8000824 <MX_GPIO_Init+0x114>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_GPIO_Init+0x114>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a2c      	ldr	r2, [pc, #176]	; (8000824 <MX_GPIO_Init+0x114>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_GPIO_Init+0x114>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800078a:	4827      	ldr	r0, [pc, #156]	; (8000828 <MX_GPIO_Init+0x118>)
 800078c:	f000 ff9a 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f248 11c0 	movw	r1, #33216	; 0x81c0
 8000796:	4825      	ldr	r0, [pc, #148]	; (800082c <MX_GPIO_Init+0x11c>)
 8000798:	f000 ff94 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <MX_GPIO_Init+0x120>)
 80007a4:	f000 ff8e 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4819      	ldr	r0, [pc, #100]	; (8000828 <MX_GPIO_Init+0x118>)
 80007c2:	f000 fe25 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
 80007c6:	f248 13c0 	movw	r3, #33216	; 0x81c0
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	4813      	ldr	r0, [pc, #76]	; (800082c <MX_GPIO_Init+0x11c>)
 80007e0:	f000 fe16 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <MX_GPIO_Init+0x120>)
 80007fe:	f000 fe07 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000802:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_GPIO_Init+0x11c>)
 8000818:	f000 fdfa 	bl	8001410 <HAL_GPIO_Init>

}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40021000 	.word	0x40021000
 8000828:	40011000 	.word	0x40011000
 800082c:	40010800 	.word	0x40010800
 8000830:	40010c00 	.word	0x40010c00

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083a:	e7fe      	b.n	800083a <Error_Handler+0x6>

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_ADC_MspInit+0x6c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d121      	bne.n	8000904 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_ADC_MspInit+0x70>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a12      	ldr	r2, [pc, #72]	; (8000910 <HAL_ADC_MspInit+0x70>)
 80008c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_ADC_MspInit+0x70>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <HAL_ADC_MspInit+0x70>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <HAL_ADC_MspInit+0x70>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_ADC_MspInit+0x70>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008f0:	230f      	movs	r3, #15
 80008f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	2303      	movs	r3, #3
 80008f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4619      	mov	r1, r3
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <HAL_ADC_MspInit+0x74>)
 8000900:	f000 fd86 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40012400 	.word	0x40012400
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800

08000918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a32      	ldr	r2, [pc, #200]	; (80009fc <HAL_I2C_MspInit+0xe4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d133      	bne.n	80009a0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4827      	ldr	r0, [pc, #156]	; (8000a04 <HAL_I2C_MspInit+0xec>)
 8000966:	f000 fd53 	bl	8001410 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_I2C_MspInit+0xf0>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000972:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <HAL_I2C_MspInit+0xf0>)
 8000982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000984:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a1d      	ldr	r2, [pc, #116]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 800098c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800099e:	e029      	b.n	80009f4 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_I2C_MspInit+0xf4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d124      	bne.n	80009f4 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	480b      	ldr	r0, [pc, #44]	; (8000a04 <HAL_I2C_MspInit+0xec>)
 80009d8:	f000 fd1a 	bl	8001410 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 80009e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_I2C_MspInit+0xe8>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40010c00 	.word	0x40010c00
 8000a08:	40010000 	.word	0x40010000
 8000a0c:	40005800 	.word	0x40005800

08000a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a20:	d10b      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_TIM_Base_MspInit+0x34>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_TIM_Base_MspInit+0x34>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	61d3      	str	r3, [r2, #28]
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_TIM_Base_MspInit+0x34>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f98b 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a9e:	f001 f892 	bl	8001bc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000119c 	.word	0x2000119c

08000aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//GPIOA->BSRR = 1<<6;
	if(BAMIndex == 0){
 8000ab2:	4b79      	ldr	r3, [pc, #484]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d105      	bne.n	8000ac8 <TIM2_IRQHandler+0x1c>
		blocked = 1; //block to protect the time sensitive LSB's, otherwise it gets pretty flicker-ry
 8000abc:	4b77      	ldr	r3, [pc, #476]	; (8000c9c <TIM2_IRQHandler+0x1f0>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		GPIOA->BSRR = 1<<6;
 8000ac2:	4b77      	ldr	r3, [pc, #476]	; (8000ca0 <TIM2_IRQHandler+0x1f4>)
 8000ac4:	2240      	movs	r2, #64	; 0x40
 8000ac6:	611a      	str	r2, [r3, #16]
	}

	if(brightness[0] & (1 << BAMIndex))	GPIOB->BSRR = (1<<12);
 8000ac8:	4b76      	ldr	r3, [pc, #472]	; (8000ca4 <TIM2_IRQHandler+0x1f8>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	fa42 f303 	asr.w	r3, r2, r3
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <TIM2_IRQHandler+0x40>
 8000ae2:	4b71      	ldr	r3, [pc, #452]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	e003      	b.n	8000af4 <TIM2_IRQHandler+0x48>
	else GPIOB->BRR = (1<<12);
 8000aec:	4b6e      	ldr	r3, [pc, #440]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000aee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af2:	615a      	str	r2, [r3, #20]
	if(brightness[1] & (1 << BAMIndex))	GPIOB->BSRR = (1<<13);
 8000af4:	4b6b      	ldr	r3, [pc, #428]	; (8000ca4 <TIM2_IRQHandler+0x1f8>)
 8000af6:	785b      	ldrb	r3, [r3, #1]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b66      	ldr	r3, [pc, #408]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	fa42 f303 	asr.w	r3, r2, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <TIM2_IRQHandler+0x6c>
 8000b0e:	4b66      	ldr	r3, [pc, #408]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b14:	611a      	str	r2, [r3, #16]
 8000b16:	e003      	b.n	8000b20 <TIM2_IRQHandler+0x74>
	else GPIOB->BRR = (1<<13);
 8000b18:	4b63      	ldr	r3, [pc, #396]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	615a      	str	r2, [r3, #20]
	if(brightness[2] & (1 << BAMIndex))	GPIOB->BSRR = (1<<14);
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <TIM2_IRQHandler+0x1f8>)
 8000b22:	789b      	ldrb	r3, [r3, #2]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b5b      	ldr	r3, [pc, #364]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	fa42 f303 	asr.w	r3, r2, r3
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <TIM2_IRQHandler+0x98>
 8000b3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000b3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b40:	611a      	str	r2, [r3, #16]
 8000b42:	e003      	b.n	8000b4c <TIM2_IRQHandler+0xa0>
	else GPIOB->BRR = (1<<14);
 8000b44:	4b58      	ldr	r3, [pc, #352]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	615a      	str	r2, [r3, #20]
	if(brightness[3] & (1 << BAMIndex))	GPIOB->BSRR = (1<<15);
 8000b4c:	4b55      	ldr	r3, [pc, #340]	; (8000ca4 <TIM2_IRQHandler+0x1f8>)
 8000b4e:	78db      	ldrb	r3, [r3, #3]
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b50      	ldr	r3, [pc, #320]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	fa42 f303 	asr.w	r3, r2, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d004      	beq.n	8000b70 <TIM2_IRQHandler+0xc4>
 8000b66:	4b50      	ldr	r3, [pc, #320]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000b68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b6c:	611a      	str	r2, [r3, #16]
 8000b6e:	e003      	b.n	8000b78 <TIM2_IRQHandler+0xcc>
	else GPIOB->BRR = (1<<15);
 8000b70:	4b4d      	ldr	r3, [pc, #308]	; (8000ca8 <TIM2_IRQHandler+0x1fc>)
 8000b72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b76:	615a      	str	r2, [r3, #20]


*/

	//FIXME this might potentially cause issues, as it blocks for half of the time
	if(BAMIndex == 3){
 8000b78:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d105      	bne.n	8000b8e <TIM2_IRQHandler+0xe2>
		blocked = 0; //Time sensitive LSB's are done, unblock, value of 3 or less gives visible flicker
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <TIM2_IRQHandler+0x1f0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
		GPIOA->BRR = 1<<6;
 8000b88:	4b45      	ldr	r3, [pc, #276]	; (8000ca0 <TIM2_IRQHandler+0x1f4>)
 8000b8a:	2240      	movs	r2, #64	; 0x40
 8000b8c:	615a      	str	r2, [r3, #20]
	}

	if(BAMIndex == 7){ //We've passed one BAM cycle
 8000b8e:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b07      	cmp	r3, #7
 8000b96:	d169      	bne.n	8000c6c <TIM2_IRQHandler+0x1c0>


		BAMIndex = 0;
 8000b98:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = 1;
 8000b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28



		uint8_t currentReadoff = ((((GPIOA->IDR)>>9) & 1) << 1) | (((GPIOA->IDR)>>10) & 1); //read current encoder state
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <TIM2_IRQHandler+0x1f4>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	0a5b      	lsrs	r3, r3, #9
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <TIM2_IRQHandler+0x1f4>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	0a9b      	lsrs	r3, r3, #10
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	71fb      	strb	r3, [r7, #7]
		uint8_t index = (lastEncoder[currentEncoder]<<2) | currentReadoff;
 8000bca:	4b38      	ldr	r3, [pc, #224]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <TIM2_IRQHandler+0x204>)
 8000bd4:	5c9b      	ldrb	r3, [r3, r2]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	b25a      	sxtb	r2, r3
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	71bb      	strb	r3, [r7, #6]
		encoderValues[currentEncoder] += encoderLUT[index];
 8000be6:	79bb      	ldrb	r3, [r7, #6]
 8000be8:	4a32      	ldr	r2, [pc, #200]	; (8000cb4 <TIM2_IRQHandler+0x208>)
 8000bea:	5cd3      	ldrb	r3, [r2, r3]
 8000bec:	b258      	sxtb	r0, r3
 8000bee:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2d9      	uxtb	r1, r3
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <TIM2_IRQHandler+0x20c>)
 8000bf8:	5c9b      	ldrb	r3, [r3, r2]
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	b2c3      	uxtb	r3, r0
 8000bfe:	4413      	add	r3, r2
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <TIM2_IRQHandler+0x20c>)
 8000c04:	545a      	strb	r2, [r3, r1]
		lastEncoder[currentEncoder] = currentReadoff;
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <TIM2_IRQHandler+0x204>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	5453      	strb	r3, [r2, r1]
		//uint8_t buffer[256];
		//sprintf(buffer, "currentReadoff %d index %d encoderValue %d\r\n", currentReadoff, index, encoderValues[0]);
		//CDC_Transmit_FS(buffer, sizeof(buffer));
		//}

		if(currentEncoder == 4) currentEncoder = 0;
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d103      	bne.n	8000c26 <TIM2_IRQHandler+0x17a>
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e006      	b.n	8000c34 <TIM2_IRQHandler+0x188>
		else currentEncoder++;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000c32:	701a      	strb	r2, [r3, #0]

		//select the nth encoder here to allow the mux time to settle
		GPIOC->BRR = (3<<13); //clear GPIO Pins
 8000c34:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <TIM2_IRQHandler+0x210>)
 8000c36:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000c3a:	615a      	str	r2, [r3, #20]
		GPIOC->BSRR = ((currentEncoder&3)<<13);
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	035b      	lsls	r3, r3, #13
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <TIM2_IRQHandler+0x210>)
 8000c46:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8000c4a:	6113      	str	r3, [r2, #16]
		GPIOA->BRR = (1<<15);
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <TIM2_IRQHandler+0x1f4>)
 8000c4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c52:	615a      	str	r2, [r3, #20]
		if(currentEncoder&4) GPIOA->BSRR = (1<<15); //BLOODY SOLDER DAG!!! Shorted out the pins giving the result in DS14
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <TIM2_IRQHandler+0x200>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d012      	beq.n	8000c88 <TIM2_IRQHandler+0x1dc>
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <TIM2_IRQHandler+0x1f4>)
 8000c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	e00d      	b.n	8000c88 <TIM2_IRQHandler+0x1dc>

	}
	else{
		BAMIndex++;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <TIM2_IRQHandler+0x1ec>)
 8000c78:	701a      	strb	r2, [r3, #0]
		TIM2->PSC = (volatile)(TIM2->PSC << 1); //set next write to occupy twice the time of this current write.
 8000c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	6293      	str	r3, [r2, #40]	; 0x28
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <TIM2_IRQHandler+0x214>)
 8000c8a:	f002 fefc 	bl	8003a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001ac 	.word	0x200001ac
 8000c9c:	200001ad 	.word	0x200001ad
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	40010c00 	.word	0x40010c00
 8000cac:	200001ae 	.word	0x200001ae
 8000cb0:	200001b0 	.word	0x200001b0
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	200001b8 	.word	0x200001b8
 8000cbc:	40011000 	.word	0x40011000
 8000cc0:	200004bc 	.word	0x200004bc

08000cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <Reset_Handler>:
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	e003      	b.n	8000cdc <LoopCopyDataInit>

08000cd4 <CopyDataInit>:
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <LoopFillZerobss+0x14>)
 8000cd6:	585b      	ldr	r3, [r3, r1]
 8000cd8:	5043      	str	r3, [r0, r1]
 8000cda:	3104      	adds	r1, #4

08000cdc <LoopCopyDataInit>:
 8000cdc:	480a      	ldr	r0, [pc, #40]	; (8000d08 <LoopFillZerobss+0x18>)
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <LoopFillZerobss+0x1c>)
 8000ce0:	1842      	adds	r2, r0, r1
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d3f6      	bcc.n	8000cd4 <CopyDataInit>
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopFillZerobss+0x20>)
 8000ce8:	e002      	b.n	8000cf0 <LoopFillZerobss>

08000cea <FillZerobss>:
 8000cea:	2300      	movs	r3, #0
 8000cec:	f842 3b04 	str.w	r3, [r2], #4

08000cf0 <LoopFillZerobss>:
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <LoopFillZerobss+0x24>)
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d3f9      	bcc.n	8000cea <FillZerobss>
 8000cf6:	f7ff ffe5 	bl	8000cc4 <SystemInit>
 8000cfa:	f007 fa71 	bl	80081e0 <__libc_init_array>
 8000cfe:	f7ff fb07 	bl	8000310 <main>
 8000d02:	4770      	bx	lr
 8000d04:	080082cc 	.word	0x080082cc
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000190 	.word	0x20000190
 8000d10:	20000190 	.word	0x20000190
 8000d14:	20001488 	.word	0x20001488

08000d18 <ADC1_2_IRQHandler>:
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x28>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x28>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 fb2d 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fd80 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fb45 	bl	80013f6 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 fb0d 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000014 	.word	0x20000014
 8000da0:	2000001c 	.word	0x2000001c
 8000da4:	20000018 	.word	0x20000018

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x20>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	2000001c 	.word	0x2000001c
 8000dc8:	20000504 	.word	0x20000504

08000dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <HAL_GetTick+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000504 	.word	0x20000504

08000de0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e0be      	b.n	8000f80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d109      	bne.n	8000e24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fd3e 	bl	80008a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f9ab 	bl	8001180 <ADC_ConversionStop_Disable>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f040 8099 	bne.w	8000f6e <HAL_ADC_Init+0x18e>
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8095 	bne.w	8000f6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e4c:	f023 0302 	bic.w	r3, r3, #2
 8000e50:	f043 0202 	orr.w	r2, r3, #2
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7b1b      	ldrb	r3, [r3, #12]
 8000e66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e78:	d003      	beq.n	8000e82 <HAL_ADC_Init+0xa2>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d102      	bne.n	8000e88 <HAL_ADC_Init+0xa8>
 8000e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e86:	e000      	b.n	8000e8a <HAL_ADC_Init+0xaa>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7d1b      	ldrb	r3, [r3, #20]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d119      	bne.n	8000ecc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7b1b      	ldrb	r3, [r3, #12]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d109      	bne.n	8000eb4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	035a      	lsls	r2, r3, #13
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	e00b      	b.n	8000ecc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f043 0220 	orr.w	r2, r3, #32
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	f043 0201 	orr.w	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <HAL_ADC_Init+0x1a8>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	430b      	orrs	r3, r1
 8000ef2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000efc:	d003      	beq.n	8000f06 <HAL_ADC_Init+0x126>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d104      	bne.n	8000f10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	051b      	lsls	r3, r3, #20
 8000f0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_ADC_Init+0x1ac>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d10b      	bne.n	8000f4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3e:	f023 0303 	bic.w	r3, r3, #3
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f4a:	e018      	b.n	8000f7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f50:	f023 0312 	bic.w	r3, r3, #18
 8000f54:	f043 0210 	orr.w	r2, r3, #16
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	f043 0201 	orr.w	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f6c:	e007      	b.n	8000f7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	f043 0210 	orr.w	r2, r3, #16
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	ffe1f7fd 	.word	0xffe1f7fd
 8000f8c:	ff1f0efe 	.word	0xff1f0efe

08000f90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d101      	bne.n	8000fb0 <HAL_ADC_ConfigChannel+0x20>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e0dc      	b.n	800116a <HAL_ADC_ConfigChannel+0x1da>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b06      	cmp	r3, #6
 8000fbe:	d81c      	bhi.n	8000ffa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b05      	subs	r3, #5
 8000fd2:	221f      	movs	r2, #31
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4019      	ands	r1, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	3b05      	subs	r3, #5
 8000fec:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff8:	e03c      	b.n	8001074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b0c      	cmp	r3, #12
 8001000:	d81c      	bhi.n	800103c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	3b23      	subs	r3, #35	; 0x23
 8001014:	221f      	movs	r2, #31
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	4019      	ands	r1, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	3b23      	subs	r3, #35	; 0x23
 800102e:	fa00 f203 	lsl.w	r2, r0, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
 800103a:	e01b      	b.n	8001074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	3b41      	subs	r3, #65	; 0x41
 800104e:	221f      	movs	r2, #31
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	4019      	ands	r1, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	3b41      	subs	r3, #65	; 0x41
 8001068:	fa00 f203 	lsl.w	r2, r0, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	430a      	orrs	r2, r1
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b09      	cmp	r3, #9
 800107a:	d91c      	bls.n	80010b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68d9      	ldr	r1, [r3, #12]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	3b1e      	subs	r3, #30
 800108e:	2207      	movs	r2, #7
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	4019      	ands	r1, r3
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	6898      	ldr	r0, [r3, #8]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	3b1e      	subs	r3, #30
 80010a8:	fa00 f203 	lsl.w	r2, r0, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	e019      	b.n	80010ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6919      	ldr	r1, [r3, #16]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	2207      	movs	r2, #7
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4019      	ands	r1, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6898      	ldr	r0, [r3, #8]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	fa00 f203 	lsl.w	r2, r0, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b10      	cmp	r3, #16
 80010f0:	d003      	beq.n	80010fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010f6:	2b11      	cmp	r3, #17
 80010f8:	d132      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_ADC_ConfigChannel+0x1e4>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d125      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d126      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001120:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b10      	cmp	r3, #16
 8001128:	d11a      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_ADC_ConfigChannel+0x1e8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_ADC_ConfigChannel+0x1ec>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	0c9a      	lsrs	r2, r3, #18
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001140:	e002      	b.n	8001148 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3b01      	subs	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f9      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x1b2>
 800114e:	e007      	b.n	8001160 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f043 0220 	orr.w	r2, r3, #32
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40012400 	.word	0x40012400
 8001178:	20000014 	.word	0x20000014
 800117c:	431bde83 	.word	0x431bde83

08001180 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b01      	cmp	r3, #1
 8001198:	d127      	bne.n	80011ea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011aa:	f7ff fe0f 	bl	8000dcc <HAL_GetTick>
 80011ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011b0:	e014      	b.n	80011dc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011b2:	f7ff fe0b 	bl	8000dcc <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d90d      	bls.n	80011dc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f043 0210 	orr.w	r2, r3, #16
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e007      	b.n	80011ec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d0e3      	beq.n	80011b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4906      	ldr	r1, [pc, #24]	; (800128c <__NVIC_EnableIRQ+0x34>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff90 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff2d 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff42 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff90 	bl	80012e4 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5f 	bl	8001290 <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff35 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b08b      	sub	sp, #44	; 0x2c
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e127      	b.n	8001674 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001424:	2201      	movs	r2, #1
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	429a      	cmp	r2, r3
 800143e:	f040 8116 	bne.w	800166e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b12      	cmp	r3, #18
 8001448:	d034      	beq.n	80014b4 <HAL_GPIO_Init+0xa4>
 800144a:	2b12      	cmp	r3, #18
 800144c:	d80d      	bhi.n	800146a <HAL_GPIO_Init+0x5a>
 800144e:	2b02      	cmp	r3, #2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x9a>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d804      	bhi.n	8001460 <HAL_GPIO_Init+0x50>
 8001456:	2b00      	cmp	r3, #0
 8001458:	d031      	beq.n	80014be <HAL_GPIO_Init+0xae>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d01c      	beq.n	8001498 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145e:	e048      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001460:	2b03      	cmp	r3, #3
 8001462:	d043      	beq.n	80014ec <HAL_GPIO_Init+0xdc>
 8001464:	2b11      	cmp	r3, #17
 8001466:	d01b      	beq.n	80014a0 <HAL_GPIO_Init+0x90>
          break;
 8001468:	e043      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800146a:	4a89      	ldr	r2, [pc, #548]	; (8001690 <HAL_GPIO_Init+0x280>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d026      	beq.n	80014be <HAL_GPIO_Init+0xae>
 8001470:	4a87      	ldr	r2, [pc, #540]	; (8001690 <HAL_GPIO_Init+0x280>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d806      	bhi.n	8001484 <HAL_GPIO_Init+0x74>
 8001476:	4a87      	ldr	r2, [pc, #540]	; (8001694 <HAL_GPIO_Init+0x284>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d020      	beq.n	80014be <HAL_GPIO_Init+0xae>
 800147c:	4a86      	ldr	r2, [pc, #536]	; (8001698 <HAL_GPIO_Init+0x288>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d01d      	beq.n	80014be <HAL_GPIO_Init+0xae>
          break;
 8001482:	e036      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001484:	4a85      	ldr	r2, [pc, #532]	; (800169c <HAL_GPIO_Init+0x28c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d019      	beq.n	80014be <HAL_GPIO_Init+0xae>
 800148a:	4a85      	ldr	r2, [pc, #532]	; (80016a0 <HAL_GPIO_Init+0x290>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d016      	beq.n	80014be <HAL_GPIO_Init+0xae>
 8001490:	4a84      	ldr	r2, [pc, #528]	; (80016a4 <HAL_GPIO_Init+0x294>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0xae>
          break;
 8001496:	e02c      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e028      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	3304      	adds	r3, #4
 80014a6:	623b      	str	r3, [r7, #32]
          break;
 80014a8:	e023      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	3308      	adds	r3, #8
 80014b0:	623b      	str	r3, [r7, #32]
          break;
 80014b2:	e01e      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	330c      	adds	r3, #12
 80014ba:	623b      	str	r3, [r7, #32]
          break;
 80014bc:	e019      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014c6:	2304      	movs	r3, #4
 80014c8:	623b      	str	r3, [r7, #32]
          break;
 80014ca:	e012      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d4:	2308      	movs	r3, #8
 80014d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69fa      	ldr	r2, [r7, #28]
 80014dc:	611a      	str	r2, [r3, #16]
          break;
 80014de:	e008      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	615a      	str	r2, [r3, #20]
          break;
 80014ea:	e002      	b.n	80014f2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	d801      	bhi.n	80014fc <HAL_GPIO_Init+0xec>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	e001      	b.n	8001500 <HAL_GPIO_Init+0xf0>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3304      	adds	r3, #4
 8001500:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2bff      	cmp	r3, #255	; 0xff
 8001506:	d802      	bhi.n	800150e <HAL_GPIO_Init+0xfe>
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x104>
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	3b08      	subs	r3, #8
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	210f      	movs	r1, #15
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	401a      	ands	r2, r3
 8001526:	6a39      	ldr	r1, [r7, #32]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	431a      	orrs	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8096 	beq.w	800166e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001542:	4b59      	ldr	r3, [pc, #356]	; (80016a8 <HAL_GPIO_Init+0x298>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a58      	ldr	r2, [pc, #352]	; (80016a8 <HAL_GPIO_Init+0x298>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_GPIO_Init+0x298>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800155a:	4a54      	ldr	r2, [pc, #336]	; (80016ac <HAL_GPIO_Init+0x29c>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x2a0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x19e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x2a4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x19a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x2a8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x196>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_GPIO_Init+0x2ac>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x192>
 800159e:	2303      	movs	r3, #3
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x1a0>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_Init+0x1a0>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_Init+0x1a0>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x1a0>
 80015ae:	2300      	movs	r3, #0
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	f002 0203 	and.w	r2, r2, #3
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	4093      	lsls	r3, r2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015c0:	493a      	ldr	r1, [pc, #232]	; (80016ac <HAL_GPIO_Init+0x29c>)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015da:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4938      	ldr	r1, [pc, #224]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
 80015e6:	e006      	b.n	80015f6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	4933      	ldr	r1, [pc, #204]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	492e      	ldr	r1, [pc, #184]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	43db      	mvns	r3, r3
 8001618:	4929      	ldr	r1, [pc, #164]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 800161a:	4013      	ands	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	4924      	ldr	r1, [pc, #144]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	43db      	mvns	r3, r3
 8001640:	491f      	ldr	r1, [pc, #124]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001642:	4013      	ands	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	491a      	ldr	r1, [pc, #104]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	60cb      	str	r3, [r1, #12]
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4915      	ldr	r1, [pc, #84]	; (80016c0 <HAL_GPIO_Init+0x2b0>)
 800166a:	4013      	ands	r3, r2
 800166c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	f47f aed0 	bne.w	8001424 <HAL_GPIO_Init+0x14>
  }
}
 8001684:	bf00      	nop
 8001686:	372c      	adds	r7, #44	; 0x2c
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	10210000 	.word	0x10210000
 8001694:	10110000 	.word	0x10110000
 8001698:	10120000 	.word	0x10120000
 800169c:	10310000 	.word	0x10310000
 80016a0:	10320000 	.word	0x10320000
 80016a4:	10220000 	.word	0x10220000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40010800 	.word	0x40010800
 80016b4:	40010c00 	.word	0x40010c00
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40011400 	.word	0x40011400
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e0:	e003      	b.n	80016ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e11f      	b.n	8001946 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d106      	bne.n	8001720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff f8fc 	bl	8000918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2224      	movs	r2, #36	; 0x24
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001758:	f002 f85e 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 800175c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a7b      	ldr	r2, [pc, #492]	; (8001950 <HAL_I2C_Init+0x25c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d807      	bhi.n	8001778 <HAL_I2C_Init+0x84>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <HAL_I2C_Init+0x260>)
 800176c:	4293      	cmp	r3, r2
 800176e:	bf94      	ite	ls
 8001770:	2301      	movls	r3, #1
 8001772:	2300      	movhi	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e006      	b.n	8001786 <HAL_I2C_Init+0x92>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a77      	ldr	r2, [pc, #476]	; (8001958 <HAL_I2C_Init+0x264>)
 800177c:	4293      	cmp	r3, r2
 800177e:	bf94      	ite	ls
 8001780:	2301      	movls	r3, #1
 8001782:	2300      	movhi	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0db      	b.n	8001946 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_I2C_Init+0x268>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a64      	ldr	r2, [pc, #400]	; (8001950 <HAL_I2C_Init+0x25c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d802      	bhi.n	80017c8 <HAL_I2C_Init+0xd4>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	3301      	adds	r3, #1
 80017c6:	e009      	b.n	80017dc <HAL_I2C_Init+0xe8>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	4a63      	ldr	r2, [pc, #396]	; (8001960 <HAL_I2C_Init+0x26c>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	3301      	adds	r3, #1
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4956      	ldr	r1, [pc, #344]	; (8001950 <HAL_I2C_Init+0x25c>)
 80017f8:	428b      	cmp	r3, r1
 80017fa:	d80d      	bhi.n	8001818 <HAL_I2C_Init+0x124>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1e59      	subs	r1, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fbb1 f3f3 	udiv	r3, r1, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b04      	cmp	r3, #4
 8001812:	bf38      	it	cc
 8001814:	2304      	movcc	r3, #4
 8001816:	e04f      	b.n	80018b8 <HAL_I2C_Init+0x1c4>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d111      	bne.n	8001844 <HAL_I2C_Init+0x150>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	440b      	add	r3, r1
 800182e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001832:	3301      	adds	r3, #1
 8001834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf0c      	ite	eq
 800183c:	2301      	moveq	r3, #1
 800183e:	2300      	movne	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e012      	b.n	800186a <HAL_I2C_Init+0x176>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e58      	subs	r0, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	0099      	lsls	r1, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	2b00      	cmp	r3, #0
 8001862:	bf0c      	ite	eq
 8001864:	2301      	moveq	r3, #1
 8001866:	2300      	movne	r3, #0
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_Init+0x17e>
 800186e:	2301      	movs	r3, #1
 8001870:	e022      	b.n	80018b8 <HAL_I2C_Init+0x1c4>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d10e      	bne.n	8001898 <HAL_I2C_Init+0x1a4>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1e58      	subs	r0, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6859      	ldr	r1, [r3, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	440b      	add	r3, r1
 8001888:	fbb0 f3f3 	udiv	r3, r0, r3
 800188c:	3301      	adds	r3, #1
 800188e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001896:	e00f      	b.n	80018b8 <HAL_I2C_Init+0x1c4>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1e58      	subs	r0, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	0099      	lsls	r1, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	6809      	ldr	r1, [r1, #0]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6911      	ldr	r1, [r2, #16]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68d2      	ldr	r2, [r2, #12]
 80018f2:	4311      	orrs	r1, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2220      	movs	r2, #32
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	000186a0 	.word	0x000186a0
 8001954:	001e847f 	.word	0x001e847f
 8001958:	003d08ff 	.word	0x003d08ff
 800195c:	431bde83 	.word	0x431bde83
 8001960:	10624dd3 	.word	0x10624dd3

08001964 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af06      	add	r7, sp, #24
 800196a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0fd      	b.n	8001b72 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f006 f97e 	bl	8007c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2203      	movs	r2, #3
 8001994:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fbed 	bl	800417c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	687e      	ldr	r6, [r7, #4]
 80019aa:	466d      	mov	r5, sp
 80019ac:	f106 0410 	add.w	r4, r6, #16
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	602b      	str	r3, [r5, #0]
 80019b8:	1d33      	adds	r3, r6, #4
 80019ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f002 fbb7 	bl	8004130 <USB_CoreInit>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0ce      	b.n	8001b72 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fbe8 	bl	80041b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
 80019e4:	e04c      	b.n	8001a80 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	3301      	adds	r3, #1
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	b298      	uxth	r0, r3
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	3336      	adds	r3, #54	; 0x36
 8001a24:	4602      	mov	r2, r0
 8001a26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3303      	adds	r3, #3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3338      	adds	r3, #56	; 0x38
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	440b      	add	r3, r1
 8001a60:	333c      	adds	r3, #60	; 0x3c
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	3340      	adds	r3, #64	; 0x40
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d3ad      	bcc.n	80019e6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	e044      	b.n	8001b1a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ae8:	7bfa      	ldrb	r2, [r7, #15]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001afe:	7bfa      	ldrb	r2, [r7, #15]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3301      	adds	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d3b5      	bcc.n	8001a90 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	687e      	ldr	r6, [r7, #4]
 8001b2c:	466d      	mov	r5, sp
 8001b2e:	f106 0410 	add.w	r4, r6, #16
 8001b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	1d33      	adds	r3, r6, #4
 8001b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3e:	6838      	ldr	r0, [r7, #0]
 8001b40:	f002 fb42 	bl	80041c8 <USB_DevInit>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00d      	b.n	8001b72 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f004 fadc 	bl	8006128 <USB_DevDisconnect>

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_PCD_Start+0x16>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e016      	b.n	8001bbe <HAL_PCD_Start+0x44>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fad7 	bl	8004150 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f006 fae4 	bl	8008172 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fab0 	bl	8006114 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b088      	sub	sp, #32
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f004 fab2 	bl	800613c <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be2:	d102      	bne.n	8001bea <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 fb61 	bl	80022ac <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f004 faa4 	bl	800613c <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d112      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f006 f8b2 	bl	8007d82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f925 	bl	8001e70 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f004 fa86 	bl	800613c <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c3a:	d10b      	bne.n	8001c54 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 fa6f 	bl	800613c <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c68:	d10b      	bne.n	8001c82 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c7c:	b292      	uxth	r2, r2
 8001c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fa58 	bl	800613c <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c96:	d126      	bne.n	8001ce6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	b292      	uxth	r2, r2
 8001cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0208 	bic.w	r2, r2, #8
 8001cc2:	b292      	uxth	r2, r2
 8001cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f006 f893 	bl	8007df4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ce0:	b292      	uxth	r2, r2
 8001ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 fa26 	bl	800613c <USB_ReadInterrupts>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cfa:	f040 8084 	bne.w	8001e06 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	77fb      	strb	r3, [r7, #31]
 8001d02:	e011      	b.n	8001d28 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	441a      	add	r2, r3
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	8812      	ldrh	r2, [r2, #0]
 8001d14:	b292      	uxth	r2, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	f107 0120 	add.w	r1, r7, #32
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d22:	7ffb      	ldrb	r3, [r7, #31]
 8001d24:	3301      	adds	r3, #1
 8001d26:	77fb      	strb	r3, [r7, #31]
 8001d28:	7ffb      	ldrb	r3, [r7, #31]
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d9ea      	bls.n	8001d04 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	b292      	uxth	r2, r2
 8001d42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	b292      	uxth	r2, r2
 8001d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d5e:	bf00      	nop
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f6      	beq.n	8001d60 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d84:	b292      	uxth	r2, r2
 8001d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	77fb      	strb	r3, [r7, #31]
 8001d8e:	e010      	b.n	8001db2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4611      	mov	r1, r2
 8001d98:	7ffa      	ldrb	r2, [r7, #31]
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	440a      	add	r2, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	f107 0120 	add.w	r1, r7, #32
 8001da4:	440b      	add	r3, r1
 8001da6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001daa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001dac:	7ffb      	ldrb	r3, [r7, #31]
 8001dae:	3301      	adds	r3, #1
 8001db0:	77fb      	strb	r3, [r7, #31]
 8001db2:	7ffb      	ldrb	r3, [r7, #31]
 8001db4:	2b07      	cmp	r3, #7
 8001db6:	d9eb      	bls.n	8001d90 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0208 	orr.w	r2, r2, #8
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de2:	b292      	uxth	r2, r2
 8001de4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0204 	orr.w	r2, r2, #4
 8001dfa:	b292      	uxth	r2, r2
 8001dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f005 ffdd 	bl	8007dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f004 f996 	bl	800613c <USB_ReadInterrupts>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1a:	d10e      	bne.n	8001e3a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e2e:	b292      	uxth	r2, r2
 8001e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f005 ff96 	bl	8007d66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 f97c 	bl	800613c <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4e:	d10b      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e62:	b292      	uxth	r2, r2
 8001e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_SetAddress+0x1a>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e013      	b.n	8001eb2 <HAL_PCD_SetAddress+0x42>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 f923 	bl	80060ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	4608      	mov	r0, r1
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4603      	mov	r3, r0
 8001eca:	70fb      	strb	r3, [r7, #3]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	803b      	strh	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da0e      	bge.n	8001efe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	705a      	strb	r2, [r3, #1]
 8001efc:	e00e      	b.n	8001f1c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f003 0207 	and.w	r2, r3, #7
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f28:	883a      	ldrh	r2, [r7, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	78ba      	ldrb	r2, [r7, #2]
 8001f32:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	785b      	ldrb	r3, [r3, #1]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f46:	78bb      	ldrb	r3, [r7, #2]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d102      	bne.n	8001f52 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_EP_Open+0xa6>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e00e      	b.n	8001f7e <HAL_PCD_EP_Open+0xc4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f002 f94a 	bl	8004208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0e      	bge.n	8001fb8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	705a      	strb	r2, [r3, #1]
 8001fb6:	e00e      	b.n	8001fd6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	f003 0207 	and.w	r2, r3, #7
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_PCD_EP_Close+0x6a>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e00e      	b.n	800200e <HAL_PCD_EP_Close+0x88>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 fc6c 	bl	80048dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	460b      	mov	r3, r1
 8002024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002026:	7afb      	ldrb	r3, [r7, #11]
 8002028:	f003 0207 	and.w	r2, r3, #7
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	b2da      	uxtb	r2, r3
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6979      	ldr	r1, [r7, #20]
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fe1e 	bl	8004cb4 <USB_EPStartXfer>
 8002078:	e005      	b.n	8002086 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6979      	ldr	r1, [r7, #20]
 8002080:	4618      	mov	r0, r3
 8002082:	f002 fe17 	bl	8004cb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 0207 	and.w	r2, r3, #7
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	460b      	mov	r3, r1
 80020cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ce:	7afb      	ldrb	r3, [r7, #11]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2201      	movs	r2, #1
 8002108:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210a:	7afb      	ldrb	r3, [r7, #11]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	b2da      	uxtb	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6979      	ldr	r1, [r7, #20]
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fdc4 	bl	8004cb4 <USB_EPStartXfer>
 800212c:	e005      	b.n	800213a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6979      	ldr	r1, [r7, #20]
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fdbd 	bl	8004cb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 0207 	and.w	r2, r3, #7
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d901      	bls.n	8002162 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e04c      	b.n	80021fc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002166:	2b00      	cmp	r3, #0
 8002168:	da0e      	bge.n	8002188 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	705a      	strb	r2, [r3, #1]
 8002186:	e00c      	b.n	80021a2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_PCD_EP_SetStall+0x7e>
 80021be:	2302      	movs	r3, #2
 80021c0:	e01c      	b.n	80021fc <HAL_PCD_EP_SetStall+0xb8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68f9      	ldr	r1, [r7, #12]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fe8f 	bl	8005ef4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80021ea:	4619      	mov	r1, r3
 80021ec:	4610      	mov	r0, r2
 80021ee:	f003 ffb4 	bl	800615a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	429a      	cmp	r2, r3
 800221c:	d901      	bls.n	8002222 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e040      	b.n	80022a4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002226:	2b00      	cmp	r3, #0
 8002228:	da0e      	bge.n	8002248 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	705a      	strb	r2, [r3, #1]
 8002246:	e00e      	b.n	8002266 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	f003 0207 	and.w	r2, r3, #7
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	b2da      	uxtb	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_PCD_EP_ClrStall+0x82>
 8002282:	2302      	movs	r3, #2
 8002284:	e00e      	b.n	80022a4 <HAL_PCD_EP_ClrStall+0xa0>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68f9      	ldr	r1, [r7, #12]
 8002294:	4618      	mov	r0, r3
 8002296:	f003 fe7d 	bl	8005f94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80022b4:	e2df      	b.n	8002876 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022be:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80022cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 8158 	bne.w	8002586 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d152      	bne.n	8002386 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f0:	81fb      	strh	r3, [r7, #14]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002300:	b29b      	uxth	r3, r3
 8002302:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3328      	adds	r3, #40	; 0x28
 8002308:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002312:	b29b      	uxth	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	3302      	adds	r3, #2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	441a      	add	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002344:	2100      	movs	r1, #0
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f005 fcf3 	bl	8007d32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 828e 	beq.w	8002876 <PCD_EP_ISR_Handler+0x5ca>
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8289 	bne.w	8002876 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002370:	b2da      	uxtb	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b292      	uxth	r2, r2
 8002378:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002384:	e277      	b.n	8002876 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002396:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239c:	2b00      	cmp	r3, #0
 800239e:	d034      	beq.n	800240a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	3306      	adds	r3, #6
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f003 ff0a 	bl	80061f8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023f0:	4013      	ands	r3, r2
 80023f2:	823b      	strh	r3, [r7, #16]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	8a3a      	ldrh	r2, [r7, #16]
 80023fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023fe:	b292      	uxth	r2, r2
 8002400:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f005 fc68 	bl	8007cd8 <HAL_PCD_SetupStageCallback>
 8002408:	e235      	b.n	8002876 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800240a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800240e:	2b00      	cmp	r3, #0
 8002410:	f280 8231 	bge.w	8002876 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	b29a      	uxth	r2, r3
 800241c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002420:	4013      	ands	r3, r2
 8002422:	83bb      	strh	r3, [r7, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	8bba      	ldrh	r2, [r7, #28]
 800242a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800242e:	b292      	uxth	r2, r2
 8002430:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	3306      	adds	r3, #6
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d019      	beq.n	800249a <PCD_EP_ISR_Handler+0x1ee>
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	6959      	ldr	r1, [r3, #20]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800247e:	b29b      	uxth	r3, r3
 8002480:	f003 feba 	bl	80061f8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	441a      	add	r2, r3
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f005 fc31 	bl	8007cfc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	4413      	add	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d112      	bne.n	80024e8 <PCD_EP_ISR_Handler+0x23c>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	e02f      	b.n	8002548 <PCD_EP_ISR_Handler+0x29c>
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b3e      	cmp	r3, #62	; 0x3e
 80024ee:	d813      	bhi.n	8002518 <PCD_EP_ISR_Handler+0x26c>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <PCD_EP_ISR_Handler+0x25e>
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	3301      	adds	r3, #1
 8002508:	633b      	str	r3, [r7, #48]	; 0x30
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	b29b      	uxth	r3, r3
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	b29a      	uxth	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	e017      	b.n	8002548 <PCD_EP_ISR_Handler+0x29c>
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2b00      	cmp	r3, #0
 800252a:	d102      	bne.n	8002532 <PCD_EP_ISR_Handler+0x286>
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	3b01      	subs	r3, #1
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	b29b      	uxth	r3, r3
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	b29b      	uxth	r3, r3
 800253a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002542:	b29a      	uxth	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002558:	827b      	strh	r3, [r7, #18]
 800255a:	8a7b      	ldrh	r3, [r7, #18]
 800255c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002560:	827b      	strh	r3, [r7, #18]
 8002562:	8a7b      	ldrh	r3, [r7, #18]
 8002564:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002568:	827b      	strh	r3, [r7, #18]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	8a7b      	ldrh	r3, [r7, #18]
 8002570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002580:	b29b      	uxth	r3, r3
 8002582:	8013      	strh	r3, [r2, #0]
 8002584:	e177      	b.n	8002876 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002598:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800259c:	2b00      	cmp	r3, #0
 800259e:	f280 80ea 	bge.w	8002776 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025b8:	4013      	ands	r3, r2
 80025ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025d0:	b292      	uxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025d4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d122      	bne.n	8002638 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	3306      	adds	r3, #6
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	4413      	add	r3, r2
 8002610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800261a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800261c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	6959      	ldr	r1, [r3, #20]
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	88da      	ldrh	r2, [r3, #6]
 8002630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002632:	f003 fde1 	bl	80061f8 <USB_ReadPMA>
 8002636:	e07c      	b.n	8002732 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	78db      	ldrb	r3, [r3, #3]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d108      	bne.n	8002652 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002640:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002642:	461a      	mov	r2, r3
 8002644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f923 	bl	8002892 <HAL_PCD_EP_DB_Receive>
 800264c:	4603      	mov	r3, r0
 800264e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002650:	e06f      	b.n	8002732 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	847b      	strh	r3, [r7, #34]	; 0x22
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	441a      	add	r2, r3
 800267c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800267e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800268e:	b29b      	uxth	r3, r3
 8002690:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d021      	beq.n	80026f0 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	3302      	adds	r3, #2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02a      	beq.n	8002732 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	6959      	ldr	r1, [r3, #20]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	891a      	ldrh	r2, [r3, #8]
 80026e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ea:	f003 fd85 	bl	80061f8 <USB_ReadPMA>
 80026ee:	e020      	b.n	8002732 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	3306      	adds	r3, #6
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002718:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800271a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	6959      	ldr	r1, [r3, #20]
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	895a      	ldrh	r2, [r3, #10]
 800272c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800272e:	f003 fd63 	bl	80061f8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002738:	441a      	add	r2, r3
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002744:	441a      	add	r2, r3
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d004      	beq.n	800275c <PCD_EP_ISR_Handler+0x4b0>
 8002752:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d206      	bcs.n	800276a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f005 faca 	bl	8007cfc <HAL_PCD_DataOutStageCallback>
 8002768:	e005      	b.n	8002776 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002770:	4618      	mov	r0, r3
 8002772:	f002 fa9f 	bl	8004cb4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002776:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d07a      	beq.n	8002876 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002780:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	843b      	strh	r3, [r7, #32]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	8c3b      	ldrh	r3, [r7, #32]
 80027c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	78db      	ldrb	r3, [r3, #3]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d108      	bne.n	80027e6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d146      	bne.n	800286a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d141      	bne.n	800286a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	3302      	adds	r3, #2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800280e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	8bfb      	ldrh	r3, [r7, #30]
 8002816:	429a      	cmp	r2, r3
 8002818:	d906      	bls.n	8002828 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	8bfb      	ldrh	r3, [r7, #30]
 8002820:	1ad2      	subs	r2, r2, r3
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	e002      	b.n	800282e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f005 fa78 	bl	8007d32 <HAL_PCD_DataInStageCallback>
 8002842:	e018      	b.n	8002876 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	8bfb      	ldrh	r3, [r7, #30]
 800284a:	441a      	add	r2, r3
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	8bfb      	ldrh	r3, [r7, #30]
 8002856:	441a      	add	r2, r3
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002862:	4618      	mov	r0, r3
 8002864:	f002 fa26 	bl	8004cb4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002868:	e005      	b.n	8002876 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800286a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800286c:	461a      	mov	r2, r3
 800286e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f91b 	bl	8002aac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800287e:	b29b      	uxth	r3, r3
 8002880:	b21b      	sxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	f6ff ad17 	blt.w	80022b6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3738      	adds	r7, #56	; 0x38
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b088      	sub	sp, #32
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	4613      	mov	r3, r2
 800289e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d07e      	beq.n	80029a8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	3302      	adds	r3, #2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	8b7b      	ldrh	r3, [r7, #26]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d306      	bcc.n	80028ec <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	8b7b      	ldrh	r3, [r7, #26]
 80028e4:	1ad2      	subs	r2, r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	619a      	str	r2, [r3, #24]
 80028ea:	e002      	b.n	80028f2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d123      	bne.n	8002942 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002914:	833b      	strh	r3, [r7, #24]
 8002916:	8b3b      	ldrh	r3, [r7, #24]
 8002918:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800291c:	833b      	strh	r3, [r7, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	8b3b      	ldrh	r3, [r7, #24]
 800292e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293e:	b29b      	uxth	r3, r3
 8002940:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01f      	beq.n	800298c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	461a      	mov	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29b      	uxth	r3, r3
 800295e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	82fb      	strh	r3, [r7, #22]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	441a      	add	r2, r3
 8002976:	8afb      	ldrh	r3, [r7, #22]
 8002978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800297c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002988:	b29b      	uxth	r3, r3
 800298a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800298c:	8b7b      	ldrh	r3, [r7, #26]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8087 	beq.w	8002aa2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6959      	ldr	r1, [r3, #20]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	891a      	ldrh	r2, [r3, #8]
 80029a0:	8b7b      	ldrh	r3, [r7, #26]
 80029a2:	f003 fc29 	bl	80061f8 <USB_ReadPMA>
 80029a6:	e07c      	b.n	8002aa2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	3306      	adds	r3, #6
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	8b7b      	ldrh	r3, [r7, #26]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d306      	bcc.n	80029ea <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	8b7b      	ldrh	r3, [r7, #26]
 80029e2:	1ad2      	subs	r2, r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	619a      	str	r2, [r3, #24]
 80029e8:	e002      	b.n	80029f0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d123      	bne.n	8002a40 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	83fb      	strh	r3, [r7, #30]
 8002a14:	8bfb      	ldrh	r3, [r7, #30]
 8002a16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a1a:	83fb      	strh	r3, [r7, #30]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	8bfb      	ldrh	r3, [r7, #30]
 8002a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11f      	bne.n	8002a8a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a64:	83bb      	strh	r3, [r7, #28]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	441a      	add	r2, r3
 8002a74:	8bbb      	ldrh	r3, [r7, #28]
 8002a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a8a:	8b7b      	ldrh	r3, [r7, #26]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	6959      	ldr	r1, [r3, #20]
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	895a      	ldrh	r2, [r3, #10]
 8002a9c:	8b7b      	ldrh	r3, [r7, #26]
 8002a9e:	f003 fbab 	bl	80061f8 <USB_ReadPMA>
    }
  }

  return count;
 8002aa2:	8b7b      	ldrh	r3, [r7, #26]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b092      	sub	sp, #72	; 0x48
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aba:	88fb      	ldrh	r3, [r7, #6]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8132 	beq.w	8002d2a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3302      	adds	r3, #2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aee:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d906      	bls.n	8002b08 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002b00:	1ad2      	subs	r2, r2, r3
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	619a      	str	r2, [r3, #24]
 8002b06:	e002      	b.n	8002b0e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12c      	bne.n	8002b70 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f005 f908 	bl	8007d32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 822f 	beq.w	8002f8c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	827b      	strh	r3, [r7, #18]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	441a      	add	r2, r3
 8002b58:	8a7b      	ldrh	r3, [r7, #18]
 8002b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	8013      	strh	r3, [r2, #0]
 8002b6e:	e20d      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01f      	beq.n	8002bba <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	441a      	add	r2, r3
 8002ba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 81e3 	bne.w	8002f8c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bcc:	441a      	add	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002bd8:	441a      	add	r2, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d309      	bcc.n	8002bfe <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	621a      	str	r2, [r3, #32]
 8002bfc:	e014      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002c06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c08:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c12:	e009      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d155      	bne.n	8002cdc <HAL_PCD_EP_DB_Transmit+0x230>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	011a      	lsls	r2, r3, #4
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4413      	add	r3, r2
 8002c52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d112      	bne.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	801a      	strh	r2, [r3, #0]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	e047      	b.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x268>
 8002c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c86:	2b3e      	cmp	r3, #62	; 0x3e
 8002c88:	d811      	bhi.n	8002cae <HAL_PCD_EP_DB_Transmit+0x202>
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	029b      	lsls	r3, r3, #10
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	801a      	strh	r2, [r3, #0]
 8002cac:	e032      	b.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x268>
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_PCD_EP_DB_Transmit+0x218>
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	801a      	strh	r2, [r3, #0]
 8002cda:	e01b      	b.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x268>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d117      	bne.n	8002d14 <HAL_PCD_EP_DB_Transmit+0x268>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	011a      	lsls	r2, r3, #4
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	4413      	add	r3, r2
 8002d06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6959      	ldr	r1, [r3, #20]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	891a      	ldrh	r2, [r3, #8]
 8002d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	f003 fa24 	bl	8006170 <USB_WritePMA>
 8002d28:	e130      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3306      	adds	r3, #6
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d52:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d306      	bcc.n	8002d6c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d64:	1ad2      	subs	r2, r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	619a      	str	r2, [r3, #24]
 8002d6a:	e002      	b.n	8002d72 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d12c      	bne.n	8002dd4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f004 ffd6 	bl	8007d32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 80fd 	bne.w	8002f8c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	441a      	add	r2, r3
 8002dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	8013      	strh	r3, [r2, #0]
 8002dd2:	e0db      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11f      	bne.n	8002e1e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	f040 80b1 	bne.w	8002f8c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e30:	441a      	add	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d309      	bcc.n	8002e62 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	1ad2      	subs	r2, r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	621a      	str	r2, [r3, #32]
 8002e60:	e014      	b.n	8002e8c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002e6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e76:	e009      	b.n	8002e8c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2200      	movs	r2, #0
 8002e82:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	637b      	str	r3, [r7, #52]	; 0x34
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	785b      	ldrb	r3, [r3, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d155      	bne.n	8002f46 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eae:	4413      	add	r3, r2
 8002eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	011a      	lsls	r2, r3, #4
 8002eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eba:	4413      	add	r3, r2
 8002ebc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d112      	bne.n	8002eee <HAL_PCD_EP_DB_Transmit+0x442>
 8002ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed6:	801a      	strh	r2, [r3, #0]
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eea:	801a      	strh	r2, [r3, #0]
 8002eec:	e044      	b.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ef2:	d811      	bhi.n	8002f18 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f06:	3301      	adds	r3, #1
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	029b      	lsls	r3, r3, #10
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f14:	801a      	strh	r2, [r3, #0]
 8002f16:	e02f      	b.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <HAL_PCD_EP_DB_Transmit+0x482>
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	029b      	lsls	r3, r3, #10
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	e018      	b.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d114      	bne.n	8002f78 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	4413      	add	r3, r2
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	011a      	lsls	r2, r3, #4
 8002f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f68:	4413      	add	r3, r2
 8002f6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6959      	ldr	r1, [r3, #20]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	895a      	ldrh	r2, [r3, #10]
 8002f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f003 f8f2 	bl	8006170 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	823b      	strh	r3, [r7, #16]
 8002fa8:	8a3b      	ldrh	r3, [r7, #16]
 8002faa:	f083 0310 	eor.w	r3, r3, #16
 8002fae:	823b      	strh	r3, [r7, #16]
 8002fb0:	8a3b      	ldrh	r3, [r7, #16]
 8002fb2:	f083 0320 	eor.w	r3, r3, #32
 8002fb6:	823b      	strh	r3, [r7, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	441a      	add	r2, r3
 8002fc6:	8a3b      	ldrh	r3, [r7, #16]
 8002fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3748      	adds	r7, #72	; 0x48
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b087      	sub	sp, #28
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	817b      	strh	r3, [r7, #10]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ff8:	897b      	ldrh	r3, [r7, #10]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003004:	897b      	ldrh	r3, [r7, #10]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e009      	b.n	8003030 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800301c:	897a      	ldrh	r2, [r7, #10]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4413      	add	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003030:	893b      	ldrh	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d107      	bne.n	8003046 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2200      	movs	r2, #0
 800303a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	b29a      	uxth	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	80da      	strh	r2, [r3, #6]
 8003044:	e00b      	b.n	800305e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2201      	movs	r2, #1
 800304a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	b29a      	uxth	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	b29a      	uxth	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
	...

0800306c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e26c      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8087 	beq.w	800319a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800308c:	4b92      	ldr	r3, [pc, #584]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b04      	cmp	r3, #4
 8003096:	d00c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003098:	4b8f      	ldr	r3, [pc, #572]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d112      	bne.n	80030ca <HAL_RCC_OscConfig+0x5e>
 80030a4:	4b8c      	ldr	r3, [pc, #560]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b0:	d10b      	bne.n	80030ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b2:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d06c      	beq.n	8003198 <HAL_RCC_OscConfig+0x12c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d168      	bne.n	8003198 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e246      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x76>
 80030d4:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a7f      	ldr	r2, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e02e      	b.n	8003140 <HAL_RCC_OscConfig+0xd4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x98>
 80030ea:	4b7b      	ldr	r3, [pc, #492]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a7a      	ldr	r2, [pc, #488]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	4b78      	ldr	r3, [pc, #480]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a77      	ldr	r2, [pc, #476]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e01d      	b.n	8003140 <HAL_RCC_OscConfig+0xd4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0xbc>
 800310e:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a71      	ldr	r2, [pc, #452]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6e      	ldr	r2, [pc, #440]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0xd4>
 8003128:	4b6b      	ldr	r3, [pc, #428]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a6a      	ldr	r2, [pc, #424]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800312e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b68      	ldr	r3, [pc, #416]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a67      	ldr	r2, [pc, #412]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800313a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fd fe40 	bl	8000dcc <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fd fe3c 	bl	8000dcc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1fa      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b5d      	ldr	r3, [pc, #372]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0xe4>
 800316e:	e014      	b.n	800319a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fd fe2c 	bl	8000dcc <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7fd fe28 	bl	8000dcc <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1e6      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x10c>
 8003196:	e000      	b.n	800319a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d063      	beq.n	800326e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031a6:	4b4c      	ldr	r3, [pc, #304]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031b2:	4b49      	ldr	r3, [pc, #292]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d11c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x18c>
 80031be:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	4b43      	ldr	r3, [pc, #268]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_RCC_OscConfig+0x176>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e1ba      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e2:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4939      	ldr	r1, [pc, #228]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	e03a      	b.n	800326e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003200:	4b36      	ldr	r3, [pc, #216]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fd fde1 	bl	8000dcc <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800320e:	f7fd fddd 	bl	8000dcc <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e19b      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322c:	4b2a      	ldr	r3, [pc, #168]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4927      	ldr	r1, [pc, #156]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <HAL_RCC_OscConfig+0x270>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd fdc0 	bl	8000dcc <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fd fdbc 	bl	8000dcc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e17a      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03a      	beq.n	80032f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d019      	beq.n	80032b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <HAL_RCC_OscConfig+0x274>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003288:	f7fd fda0 	bl	8000dcc <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003290:	f7fd fd9c 	bl	8000dcc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e15a      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f000 fac6 	bl	8003840 <RCC_Delay>
 80032b4:	e01c      	b.n	80032f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b6:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_RCC_OscConfig+0x274>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032bc:	f7fd fd86 	bl	8000dcc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c2:	e00f      	b.n	80032e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c4:	f7fd fd82 	bl	8000dcc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d908      	bls.n	80032e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e140      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	42420000 	.word	0x42420000
 80032e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b9e      	ldr	r3, [pc, #632]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e9      	bne.n	80032c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a6 	beq.w	800344a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b97      	ldr	r3, [pc, #604]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10d      	bne.n	800332a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b94      	ldr	r3, [pc, #592]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	4a93      	ldr	r2, [pc, #588]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	61d3      	str	r3, [r2, #28]
 800331a:	4b91      	ldr	r3, [pc, #580]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <HAL_RCC_OscConfig+0x4f8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b8b      	ldr	r3, [pc, #556]	; (8003564 <HAL_RCC_OscConfig+0x4f8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a8a      	ldr	r2, [pc, #552]	; (8003564 <HAL_RCC_OscConfig+0x4f8>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fd fd43 	bl	8000dcc <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fd fd3f 	bl	8000dcc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b64      	cmp	r3, #100	; 0x64
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0fd      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b81      	ldr	r3, [pc, #516]	; (8003564 <HAL_RCC_OscConfig+0x4f8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d106      	bne.n	800337e <HAL_RCC_OscConfig+0x312>
 8003370:	4b7b      	ldr	r3, [pc, #492]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4a7a      	ldr	r2, [pc, #488]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6213      	str	r3, [r2, #32]
 800337c:	e02d      	b.n	80033da <HAL_RCC_OscConfig+0x36e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x334>
 8003386:	4b76      	ldr	r3, [pc, #472]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a75      	ldr	r2, [pc, #468]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6213      	str	r3, [r2, #32]
 8003392:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4a72      	ldr	r2, [pc, #456]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003398:	f023 0304 	bic.w	r3, r3, #4
 800339c:	6213      	str	r3, [r2, #32]
 800339e:	e01c      	b.n	80033da <HAL_RCC_OscConfig+0x36e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x356>
 80033a8:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4a6c      	ldr	r2, [pc, #432]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6213      	str	r3, [r2, #32]
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4a69      	ldr	r2, [pc, #420]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6213      	str	r3, [r2, #32]
 80033c0:	e00b      	b.n	80033da <HAL_RCC_OscConfig+0x36e>
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a66      	ldr	r2, [pc, #408]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	4b64      	ldr	r3, [pc, #400]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	4a63      	ldr	r2, [pc, #396]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80033d4:	f023 0304 	bic.w	r3, r3, #4
 80033d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d015      	beq.n	800340e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fd fcf3 	bl	8000dcc <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd fcef 	bl	8000dcc <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0ab      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	4b57      	ldr	r3, [pc, #348]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ee      	beq.n	80033ea <HAL_RCC_OscConfig+0x37e>
 800340c:	e014      	b.n	8003438 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7fd fcdd 	bl	8000dcc <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fd fcd9 	bl	8000dcc <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	; 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e095      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342c:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ee      	bne.n	8003416 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4b48      	ldr	r3, [pc, #288]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4a47      	ldr	r2, [pc, #284]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 8081 	beq.w	8003556 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003454:	4b42      	ldr	r3, [pc, #264]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b08      	cmp	r3, #8
 800345e:	d061      	beq.n	8003524 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d146      	bne.n	80034f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003468:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_OscConfig+0x4fc>)
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fd fcad 	bl	8000dcc <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003476:	f7fd fca9 	bl	8000dcc <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e067      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	4b35      	ldr	r3, [pc, #212]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f0      	bne.n	8003476 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d108      	bne.n	80034b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800349e:	4b30      	ldr	r3, [pc, #192]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	492d      	ldr	r1, [pc, #180]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a19      	ldr	r1, [r3, #32]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	430b      	orrs	r3, r1
 80034c2:	4927      	ldr	r1, [pc, #156]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c8:	4b27      	ldr	r3, [pc, #156]	; (8003568 <HAL_RCC_OscConfig+0x4fc>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ce:	f7fd fc7d 	bl	8000dcc <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fd fc79 	bl	8000dcc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e037      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x46a>
 80034f4:	e02f      	b.n	8003556 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <HAL_RCC_OscConfig+0x4fc>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fd fc66 	bl	8000dcc <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fd fc62 	bl	8000dcc <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e020      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x498>
 8003522:	e018      	b.n	8003556 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e013      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_OscConfig+0x4f4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	429a      	cmp	r2, r3
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e000      	b.n	8003558 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
 8003568:	42420060 	.word	0x42420060

0800356c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0d0      	b.n	8003722 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003580:	4b6a      	ldr	r3, [pc, #424]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d910      	bls.n	80035b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b67      	ldr	r3, [pc, #412]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 0207 	bic.w	r2, r3, #7
 8003596:	4965      	ldr	r1, [pc, #404]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b63      	ldr	r3, [pc, #396]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0b8      	b.n	8003722 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c8:	4b59      	ldr	r3, [pc, #356]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a58      	ldr	r2, [pc, #352]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035e0:	4b53      	ldr	r3, [pc, #332]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a52      	ldr	r2, [pc, #328]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ec:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	494d      	ldr	r1, [pc, #308]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d040      	beq.n	800368c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d115      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e07f      	b.n	8003722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e073      	b.n	8003722 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363a:	4b3d      	ldr	r3, [pc, #244]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e06b      	b.n	8003722 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364a:	4b39      	ldr	r3, [pc, #228]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4936      	ldr	r1, [pc, #216]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800365c:	f7fd fbb6 	bl	8000dcc <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	e00a      	b.n	800367a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003664:	f7fd fbb2 	bl	8000dcc <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e053      	b.n	8003722 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 020c 	and.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1eb      	bne.n	8003664 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d210      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 0207 	bic.w	r2, r3, #7
 80036a2:	4922      	ldr	r1, [pc, #136]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e032      	b.n	8003722 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c8:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4916      	ldr	r1, [pc, #88]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	490e      	ldr	r1, [pc, #56]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036fa:	f000 f821 	bl	8003740 <HAL_RCC_GetSysClockFreq>
 80036fe:	4601      	mov	r1, r0
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_RCC_ClockConfig+0x1c8>)
 800370c:	5cd3      	ldrb	r3, [r2, r3]
 800370e:	fa21 f303 	lsr.w	r3, r1, r3
 8003712:	4a09      	ldr	r2, [pc, #36]	; (8003738 <HAL_RCC_ClockConfig+0x1cc>)
 8003714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_ClockConfig+0x1d0>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fb14 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40022000 	.word	0x40022000
 8003730:	40021000 	.word	0x40021000
 8003734:	080082ac 	.word	0x080082ac
 8003738:	20000014 	.word	0x20000014
 800373c:	20000018 	.word	0x20000018

08003740 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003740:	b490      	push	{r4, r7}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003746:	4b2a      	ldr	r3, [pc, #168]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003748:	1d3c      	adds	r4, r7, #4
 800374a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800374c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b04      	cmp	r3, #4
 8003778:	d002      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x40>
 800377a:	2b08      	cmp	r3, #8
 800377c:	d003      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x46>
 800377e:	e02d      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003780:	4b1e      	ldr	r3, [pc, #120]	; (80037fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003782:	623b      	str	r3, [r7, #32]
      break;
 8003784:	e02d      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	0c9b      	lsrs	r3, r3, #18
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003792:	4413      	add	r3, r2
 8003794:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003798:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0c5b      	lsrs	r3, r3, #17
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037b2:	4413      	add	r3, r2
 80037b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80037be:	fb02 f203 	mul.w	r2, r2, r3
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e004      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	4a0c      	ldr	r2, [pc, #48]	; (8003800 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	623b      	str	r3, [r7, #32]
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80037de:	623b      	str	r3, [r7, #32]
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6a3b      	ldr	r3, [r7, #32]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3728      	adds	r7, #40	; 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc90      	pop	{r4, r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	08008250 	.word	0x08008250
 80037f4:	08008260 	.word	0x08008260
 80037f8:	40021000 	.word	0x40021000
 80037fc:	007a1200 	.word	0x007a1200
 8003800:	003d0900 	.word	0x003d0900

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b02      	ldr	r3, [pc, #8]	; (8003814 <HAL_RCC_GetHCLKFreq+0x10>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	20000014 	.word	0x20000014

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff2 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003820:	4601      	mov	r1, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4a03      	ldr	r2, [pc, #12]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5cd3      	ldrb	r3, [r2, r3]
 8003830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000
 800383c:	080082bc 	.word	0x080082bc

08003840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <RCC_Delay+0x34>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <RCC_Delay+0x38>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0a5b      	lsrs	r3, r3, #9
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800385c:	bf00      	nop
  }
  while (Delay --);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e5a      	subs	r2, r3, #1
 8003862:	60fa      	str	r2, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f9      	bne.n	800385c <RCC_Delay+0x1c>
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000014 	.word	0x20000014
 8003878:	10624dd3 	.word	0x10624dd3

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d07d      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389c:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b2:	61d3      	str	r3, [r2, #28]
 80038b4:	4b49      	ldr	r3, [pc, #292]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c0:	2301      	movs	r3, #1
 80038c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d118      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d0:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a42      	ldr	r2, [pc, #264]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038dc:	f7fd fa76 	bl	8000dcc <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	e008      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e4:	f7fd fa72 	bl	8000dcc <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e06d      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f6:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003902:	4b36      	ldr	r3, [pc, #216]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d02e      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d027      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800392a:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003930:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003936:	4a29      	ldr	r2, [pc, #164]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d014      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7fd fa41 	bl	8000dcc <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd fa3d 	bl	8000dcc <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e036      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ee      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003970:	4b1a      	ldr	r3, [pc, #104]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4917      	ldr	r1, [pc, #92]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800397e:	4313      	orrs	r3, r2
 8003980:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003992:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	490b      	ldr	r1, [pc, #44]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	4904      	ldr	r1, [pc, #16]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40007000 	.word	0x40007000
 80039e4:	42420440 	.word	0x42420440

080039e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e041      	b.n	8003a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fc fffe 	bl	8000a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f000 fa1a 	bl	8003e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d122      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0202 	mvn.w	r2, #2
 8003ab2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f9ad 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003ace:	e005      	b.n	8003adc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9a0 	bl	8003e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9af 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d122      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d11b      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f06f 0204 	mvn.w	r2, #4
 8003b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f983 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003b22:	e005      	b.n	8003b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f976 	bl	8003e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f985 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d122      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11b      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0208 	mvn.w	r2, #8
 8003b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2204      	movs	r2, #4
 8003b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f959 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003b76:	e005      	b.n	8003b84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f94c 	bl	8003e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f95b 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d122      	bne.n	8003bde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d11b      	bne.n	8003bde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0210 	mvn.w	r2, #16
 8003bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f92f 	bl	8003e28 <HAL_TIM_IC_CaptureCallback>
 8003bca:	e005      	b.n	8003bd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f922 	bl	8003e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f931 	bl	8003e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d10e      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0201 	mvn.w	r2, #1
 8003c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f8fd 	bl	8003e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d10e      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d107      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fa74 	bl	800411e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d10e      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d107      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8f5 	bl	8003e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d10e      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d107      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f06f 0220 	mvn.w	r2, #32
 8003c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fa3f 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_ConfigClockSource+0x18>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e0a6      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x166>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ccc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b40      	cmp	r3, #64	; 0x40
 8003ce4:	d067      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x120>
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d80b      	bhi.n	8003d02 <HAL_TIM_ConfigClockSource+0x6c>
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d073      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x140>
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d802      	bhi.n	8003cf8 <HAL_TIM_ConfigClockSource+0x62>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d06f      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cf6:	e078      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d06c      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x140>
 8003cfc:	2b30      	cmp	r3, #48	; 0x30
 8003cfe:	d06a      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d00:	e073      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d02:	2b70      	cmp	r3, #112	; 0x70
 8003d04:	d00d      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x8c>
 8003d06:	2b70      	cmp	r3, #112	; 0x70
 8003d08:	d804      	bhi.n	8003d14 <HAL_TIM_ConfigClockSource+0x7e>
 8003d0a:	2b50      	cmp	r3, #80	; 0x50
 8003d0c:	d033      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0xe0>
 8003d0e:	2b60      	cmp	r3, #96	; 0x60
 8003d10:	d041      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d12:	e06a      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d066      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0x152>
 8003d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1e:	d017      	beq.n	8003d50 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d20:	e063      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f000 f96e 	bl	8004012 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	609a      	str	r2, [r3, #8]
      break;
 8003d4e:	e04c      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f000 f957 	bl	8004012 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d72:	609a      	str	r2, [r3, #8]
      break;
 8003d74:	e039      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 f8ce 	bl	8003f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2150      	movs	r1, #80	; 0x50
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f925 	bl	8003fde <TIM_ITRx_SetConfig>
      break;
 8003d94:	e029      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 f8ec 	bl	8003f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2160      	movs	r1, #96	; 0x60
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f915 	bl	8003fde <TIM_ITRx_SetConfig>
      break;
 8003db4:	e019      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f000 f8ae 	bl	8003f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2140      	movs	r1, #64	; 0x40
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 f905 	bl	8003fde <TIM_ITRx_SetConfig>
      break;
 8003dd4:	e009      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f000 f8fc 	bl	8003fde <TIM_ITRx_SetConfig>
        break;
 8003de6:	e000      	b.n	8003dea <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003de8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
	...

08003e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <TIM_Base_SetConfig+0xb8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00b      	beq.n	8003e90 <TIM_Base_SetConfig+0x30>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d007      	beq.n	8003e90 <TIM_Base_SetConfig+0x30>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <TIM_Base_SetConfig+0xbc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0x30>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a25      	ldr	r2, [pc, #148]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d108      	bne.n	8003ea2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <TIM_Base_SetConfig+0xb8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <TIM_Base_SetConfig+0xbc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0x62>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <TIM_Base_SetConfig+0xc0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <TIM_Base_SetConfig+0xb8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d103      	bne.n	8003f08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800

08003f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f023 0201 	bic.w	r2, r3, #1
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 030a 	bic.w	r3, r3, #10
 8003f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f023 0210 	bic.w	r2, r3, #16
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	031b      	lsls	r3, r3, #12
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	621a      	str	r2, [r3, #32]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f043 0307 	orr.w	r3, r3, #7
 8004000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	609a      	str	r2, [r3, #8]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004012:	b480      	push	{r7}
 8004014:	b087      	sub	sp, #28
 8004016:	af00      	add	r7, sp, #0
 8004018:	60f8      	str	r0, [r7, #12]
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	021a      	lsls	r2, r3, #8
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	431a      	orrs	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4313      	orrs	r3, r2
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	609a      	str	r2, [r3, #8]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004064:	2302      	movs	r3, #2
 8004066:	e046      	b.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d009      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a10      	ldr	r2, [pc, #64]	; (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10c      	bne.n	80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004130:	b084      	sub	sp, #16
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	f107 0014 	add.w	r0, r7, #20
 800413e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	b004      	add	sp, #16
 800414e:	4770      	bx	lr

08004150 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004160:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004164:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	b29a      	uxth	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004184:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004188:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	b29b      	uxth	r3, r3
 8004196:	43db      	mvns	r3, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	4013      	ands	r3, r2
 800419c:	b29a      	uxth	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041c8:	b084      	sub	sp, #16
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	f107 0014 	add.w	r0, r7, #20
 80041d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr

08004208 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004208:	b480      	push	{r7}
 800420a:	b09b      	sub	sp, #108	; 0x6c
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800422a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	78db      	ldrb	r3, [r3, #3]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d81f      	bhi.n	800427a <USB_ActivateEndpoint+0x72>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <USB_ActivateEndpoint+0x38>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004251 	.word	0x08004251
 8004244:	0800426d 	.word	0x0800426d
 8004248:	08004283 	.word	0x08004283
 800424c:	0800425f 	.word	0x0800425f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004250:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004258:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800425c:	e012      	b.n	8004284 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800425e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004262:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004266:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800426a:	e00b      	b.n	8004284 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800426c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004274:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004278:	e004      	b.n	8004284 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004280:	e000      	b.n	8004284 <USB_ActivateEndpoint+0x7c>
      break;
 8004282:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800429a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042bc:	b29a      	uxth	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	441a      	add	r2, r3
 80042d4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	7b1b      	ldrb	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f040 8149 	bne.w	8004588 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8084 	beq.w	8004408 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4413      	add	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	011a      	lsls	r2, r3, #4
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	88db      	ldrh	r3, [r3, #6]
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	b29b      	uxth	r3, r3
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	81fb      	strh	r3, [r7, #14]
 8004342:	89fb      	ldrh	r3, [r7, #14]
 8004344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01b      	beq.n	8004384 <USB_ActivateEndpoint+0x17c>
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	81bb      	strh	r3, [r7, #12]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	89bb      	ldrh	r3, [r7, #12]
 8004370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004380:	b29b      	uxth	r3, r3
 8004382:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d020      	beq.n	80043ce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a2:	813b      	strh	r3, [r7, #8]
 80043a4:	893b      	ldrh	r3, [r7, #8]
 80043a6:	f083 0320 	eor.w	r3, r3, #32
 80043aa:	813b      	strh	r3, [r7, #8]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	441a      	add	r2, r3
 80043b6:	893b      	ldrh	r3, [r7, #8]
 80043b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	8013      	strh	r3, [r2, #0]
 80043cc:	e27f      	b.n	80048ce <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
 8004406:	e262      	b.n	80048ce <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	4413      	add	r3, r2
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	4413      	add	r3, r2
 8004426:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	88db      	ldrh	r3, [r3, #6]
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	b29b      	uxth	r3, r3
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004446:	b29b      	uxth	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	4413      	add	r3, r2
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	011a      	lsls	r2, r3, #4
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	4413      	add	r3, r2
 800445a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800445e:	623b      	str	r3, [r7, #32]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d112      	bne.n	800448e <USB_ActivateEndpoint+0x286>
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004472:	b29a      	uxth	r2, r3
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004486:	b29a      	uxth	r2, r3
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	e02f      	b.n	80044ee <USB_ActivateEndpoint+0x2e6>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b3e      	cmp	r3, #62	; 0x3e
 8004494:	d813      	bhi.n	80044be <USB_ActivateEndpoint+0x2b6>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	663b      	str	r3, [r7, #96]	; 0x60
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <USB_ActivateEndpoint+0x2a8>
 80044aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ac:	3301      	adds	r3, #1
 80044ae:	663b      	str	r3, [r7, #96]	; 0x60
 80044b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	029b      	lsls	r3, r3, #10
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e017      	b.n	80044ee <USB_ActivateEndpoint+0x2e6>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	663b      	str	r3, [r7, #96]	; 0x60
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <USB_ActivateEndpoint+0x2d0>
 80044d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044d4:	3b01      	subs	r3, #1
 80044d6:	663b      	str	r3, [r7, #96]	; 0x60
 80044d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044da:	b29b      	uxth	r3, r3
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	b29b      	uxth	r3, r3
 80044e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	83fb      	strh	r3, [r7, #30]
 80044fc:	8bfb      	ldrh	r3, [r7, #30]
 80044fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01b      	beq.n	800453e <USB_ActivateEndpoint+0x336>
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451c:	83bb      	strh	r3, [r7, #28]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	8bbb      	ldrh	r3, [r7, #28]
 800452a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453a:	b29b      	uxth	r3, r3
 800453c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004554:	837b      	strh	r3, [r7, #26]
 8004556:	8b7b      	ldrh	r3, [r7, #26]
 8004558:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800455c:	837b      	strh	r3, [r7, #26]
 800455e:	8b7b      	ldrh	r3, [r7, #26]
 8004560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004564:	837b      	strh	r3, [r7, #26]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	441a      	add	r2, r3
 8004570:	8b7b      	ldrh	r3, [r7, #26]
 8004572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004582:	b29b      	uxth	r3, r3
 8004584:	8013      	strh	r3, [r2, #0]
 8004586:	e1a2      	b.n	80048ce <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	441a      	add	r2, r3
 80045ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80045b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045d4:	4413      	add	r3, r2
 80045d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	011a      	lsls	r2, r3, #4
 80045de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e6:	657b      	str	r3, [r7, #84]	; 0x54
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	891b      	ldrh	r3, [r3, #8]
 80045ec:	085b      	lsrs	r3, r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	653b      	str	r3, [r7, #80]	; 0x50
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	4413      	add	r3, r2
 800460a:	653b      	str	r3, [r7, #80]	; 0x50
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	011a      	lsls	r2, r3, #4
 8004612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004614:	4413      	add	r3, r2
 8004616:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800461a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	895b      	ldrh	r3, [r3, #10]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	b29b      	uxth	r3, r3
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 8091 	bne.w	8004758 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4413      	add	r3, r2
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004644:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <USB_ActivateEndpoint+0x47e>
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004664:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	873b      	strh	r3, [r7, #56]	; 0x38
 8004694:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01b      	beq.n	80046d6 <USB_ActivateEndpoint+0x4ce>
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	441a      	add	r2, r3
 80046c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	441a      	add	r2, r3
 8004708:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004734:	867b      	strh	r3, [r7, #50]	; 0x32
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	441a      	add	r2, r3
 8004740:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004752:	b29b      	uxth	r3, r3
 8004754:	8013      	strh	r3, [r2, #0]
 8004756:	e0ba      	b.n	80048ce <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004768:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800476c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01d      	beq.n	80047b0 <USB_ActivateEndpoint+0x5a8>
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	b29b      	uxth	r3, r3
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	441a      	add	r2, r3
 8004798:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800479c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01d      	beq.n	8004808 <USB_ActivateEndpoint+0x600>
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004800:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004804:	b29b      	uxth	r3, r3
 8004806:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	78db      	ldrb	r3, [r3, #3]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d024      	beq.n	800485a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800482a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800482e:	f083 0320 	eor.w	r3, r3, #32
 8004832:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004854:	b29b      	uxth	r3, r3
 8004856:	8013      	strh	r3, [r2, #0]
 8004858:	e01d      	b.n	8004896 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004870:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	b29b      	uxth	r3, r3
 8004894:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80048ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	376c      	adds	r7, #108	; 0x6c
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048dc:	b480      	push	{r7}
 80048de:	b08d      	sub	sp, #52	; 0x34
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	7b1b      	ldrb	r3, [r3, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 808e 	bne.w	8004a0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d044      	beq.n	8004982 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	81bb      	strh	r3, [r7, #12]
 8004906:	89bb      	ldrh	r3, [r7, #12]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d01b      	beq.n	8004948 <USB_DeactivateEndpoint+0x6c>
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	817b      	strh	r3, [r7, #10]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004940:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495e:	813b      	strh	r3, [r7, #8]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	893b      	ldrh	r3, [r7, #8]
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
 8004980:	e192      	b.n	8004ca8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	827b      	strh	r3, [r7, #18]
 8004990:	8a7b      	ldrh	r3, [r7, #18]
 8004992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01b      	beq.n	80049d2 <USB_DeactivateEndpoint+0xf6>
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	823b      	strh	r3, [r7, #16]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	8a3b      	ldrh	r3, [r7, #16]
 80049be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e8:	81fb      	strh	r3, [r7, #14]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
 8004a0a:	e14d      	b.n	8004ca8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 80a5 	bne.w	8004b60 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	843b      	strh	r3, [r7, #32]
 8004a24:	8c3b      	ldrh	r3, [r7, #32]
 8004a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01b      	beq.n	8004a66 <USB_DeactivateEndpoint+0x18a>
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a44:	83fb      	strh	r3, [r7, #30]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	8bfb      	ldrh	r3, [r7, #30]
 8004a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	83bb      	strh	r3, [r7, #28]
 8004a74:	8bbb      	ldrh	r3, [r7, #28]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01b      	beq.n	8004ab6 <USB_DeactivateEndpoint+0x1da>
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a94:	837b      	strh	r3, [r7, #26]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8b7b      	ldrh	r3, [r7, #26]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	833b      	strh	r3, [r7, #24]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8b3b      	ldrh	r3, [r7, #24]
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	82fb      	strh	r3, [r7, #22]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8afb      	ldrh	r3, [r7, #22]
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3c:	82bb      	strh	r3, [r7, #20]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	8abb      	ldrh	r3, [r7, #20]
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]
 8004b5e:	e0a3      	b.n	8004ca8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <USB_DeactivateEndpoint+0x2d4>
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01b      	beq.n	8004c00 <USB_DeactivateEndpoint+0x324>
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	853b      	strh	r3, [r7, #40]	; 0x28
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	441a      	add	r2, r3
 8004c22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3734      	adds	r7, #52	; 0x34
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b0c4      	sub	sp, #272	; 0x110
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	1d3b      	adds	r3, r7, #4
 8004cbc:	6018      	str	r0, [r3, #0]
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	785b      	ldrb	r3, [r3, #1]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	f040 8557 	bne.w	800577c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004cce:	463b      	mov	r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d905      	bls.n	8004cea <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004cde:	463b      	mov	r3, r7
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004ce8:	e004      	b.n	8004cf4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004cea:	463b      	mov	r3, r7
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	7b1b      	ldrb	r3, [r3, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d12c      	bne.n	8004d58 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004cfe:	463b      	mov	r3, r7
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6959      	ldr	r1, [r3, #20]
 8004d04:	463b      	mov	r3, r7
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	88da      	ldrh	r2, [r3, #6]
 8004d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	1d38      	adds	r0, r7, #4
 8004d12:	6800      	ldr	r0, [r0, #0]
 8004d14:	f001 fa2c 	bl	8006170 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d18:	1d3b      	adds	r3, r7, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	463b      	mov	r3, r7
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	011a      	lsls	r2, r3, #4
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	f107 0310 	add.w	r3, r7, #16
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	f000 bcdd 	b.w	8005712 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d58:	463b      	mov	r3, r7
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	78db      	ldrb	r3, [r3, #3]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	f040 8347 	bne.w	80053f2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d64:	463b      	mov	r3, r7
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6a1a      	ldr	r2, [r3, #32]
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f240 82eb 	bls.w	800534c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d76:	1d3b      	adds	r3, r7, #4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	463b      	mov	r3, r7
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004dba:	463b      	mov	r3, r7
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc4:	1ad2      	subs	r2, r2, r3
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dcc:	1d3b      	adds	r3, r7, #4
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8159 	beq.w	800509a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004de8:	1d3b      	adds	r3, r7, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
 8004dee:	463b      	mov	r3, r7
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d164      	bne.n	8004ec2 <USB_EPStartXfer+0x20e>
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	4413      	add	r3, r2
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e10:	463b      	mov	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	011a      	lsls	r2, r3, #4
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d112      	bne.n	8004e50 <USB_EPStartXfer+0x19c>
 8004e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	801a      	strh	r2, [r3, #0]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	e054      	b.n	8004efa <USB_EPStartXfer+0x246>
 8004e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e54:	2b3e      	cmp	r3, #62	; 0x3e
 8004e56:	d817      	bhi.n	8004e88 <USB_EPStartXfer+0x1d4>
 8004e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d004      	beq.n	8004e78 <USB_EPStartXfer+0x1c4>
 8004e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e72:	3301      	adds	r3, #1
 8004e74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	029b      	lsls	r3, r3, #10
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e038      	b.n	8004efa <USB_EPStartXfer+0x246>
 8004e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <USB_EPStartXfer+0x1f4>
 8004e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	029b      	lsls	r3, r3, #10
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	801a      	strh	r2, [r3, #0]
 8004ec0:	e01b      	b.n	8004efa <USB_EPStartXfer+0x246>
 8004ec2:	463b      	mov	r3, r7
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d116      	bne.n	8004efa <USB_EPStartXfer+0x246>
 8004ecc:	1d3b      	adds	r3, r7, #4
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	4413      	add	r3, r2
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	463b      	mov	r3, r7
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee8:	4413      	add	r3, r2
 8004eea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004efa:	463b      	mov	r3, r7
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	895b      	ldrh	r3, [r3, #10]
 8004f00:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f04:	463b      	mov	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6959      	ldr	r1, [r3, #20]
 8004f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f14:	1d38      	adds	r0, r7, #4
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	f001 f92a 	bl	8006170 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f26:	441a      	add	r2, r3
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f2e:	463b      	mov	r3, r7
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a1a      	ldr	r2, [r3, #32]
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d909      	bls.n	8004f52 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004f3e:	463b      	mov	r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f48:	1ad2      	subs	r2, r2, r3
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	621a      	str	r2, [r3, #32]
 8004f50:	e008      	b.n	8004f64 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f52:	463b      	mov	r3, r7
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2200      	movs	r2, #0
 8004f62:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d164      	bne.n	8005038 <USB_EPStartXfer+0x384>
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d112      	bne.n	8004fc6 <USB_EPStartXfer+0x312>
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	801a      	strh	r2, [r3, #0]
 8004fc4:	e057      	b.n	8005076 <USB_EPStartXfer+0x3c2>
 8004fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fca:	2b3e      	cmp	r3, #62	; 0x3e
 8004fcc:	d817      	bhi.n	8004ffe <USB_EPStartXfer+0x34a>
 8004fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d004      	beq.n	8004fee <USB_EPStartXfer+0x33a>
 8004fe4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004fee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	e03b      	b.n	8005076 <USB_EPStartXfer+0x3c2>
 8004ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2b00      	cmp	r3, #0
 8005012:	d104      	bne.n	800501e <USB_EPStartXfer+0x36a>
 8005014:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005018:	3b01      	subs	r3, #1
 800501a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800501e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005022:	b29b      	uxth	r3, r3
 8005024:	029b      	lsls	r3, r3, #10
 8005026:	b29b      	uxth	r3, r3
 8005028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005030:	b29a      	uxth	r2, r3
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	e01e      	b.n	8005076 <USB_EPStartXfer+0x3c2>
 8005038:	463b      	mov	r3, r7
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	785b      	ldrb	r3, [r3, #1]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d119      	bne.n	8005076 <USB_EPStartXfer+0x3c2>
 8005042:	1d3b      	adds	r3, r7, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
 8005048:	1d3b      	adds	r3, r7, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005050:	b29b      	uxth	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	4413      	add	r3, r2
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	4413      	add	r3, r2
 8005066:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005070:	b29a      	uxth	r2, r3
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	891b      	ldrh	r3, [r3, #8]
 800507c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005080:	463b      	mov	r3, r7
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6959      	ldr	r1, [r3, #20]
 8005086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800508a:	b29b      	uxth	r3, r3
 800508c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005090:	1d38      	adds	r0, r7, #4
 8005092:	6800      	ldr	r0, [r0, #0]
 8005094:	f001 f86c 	bl	8006170 <USB_WritePMA>
 8005098:	e33b      	b.n	8005712 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d164      	bne.n	800516e <USB_EPStartXfer+0x4ba>
 80050a4:	1d3b      	adds	r3, r7, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b8:	4413      	add	r3, r2
 80050ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050bc:	463b      	mov	r3, r7
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	011a      	lsls	r2, r3, #4
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d112      	bne.n	80050fc <USB_EPStartXfer+0x448>
 80050d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	e057      	b.n	80051ac <USB_EPStartXfer+0x4f8>
 80050fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005100:	2b3e      	cmp	r3, #62	; 0x3e
 8005102:	d817      	bhi.n	8005134 <USB_EPStartXfer+0x480>
 8005104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800510e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d004      	beq.n	8005124 <USB_EPStartXfer+0x470>
 800511a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800511e:	3301      	adds	r3, #1
 8005120:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005128:	b29b      	uxth	r3, r3
 800512a:	029b      	lsls	r3, r3, #10
 800512c:	b29a      	uxth	r2, r3
 800512e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e03b      	b.n	80051ac <USB_EPStartXfer+0x4f8>
 8005134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800513e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2b00      	cmp	r3, #0
 8005148:	d104      	bne.n	8005154 <USB_EPStartXfer+0x4a0>
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514e:	3b01      	subs	r3, #1
 8005150:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005158:	b29b      	uxth	r3, r3
 800515a:	029b      	lsls	r3, r3, #10
 800515c:	b29b      	uxth	r3, r3
 800515e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005166:	b29a      	uxth	r2, r3
 8005168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516a:	801a      	strh	r2, [r3, #0]
 800516c:	e01e      	b.n	80051ac <USB_EPStartXfer+0x4f8>
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d119      	bne.n	80051ac <USB_EPStartXfer+0x4f8>
 8005178:	1d3b      	adds	r3, r7, #4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	657b      	str	r3, [r7, #84]	; 0x54
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518c:	4413      	add	r3, r2
 800518e:	657b      	str	r3, [r7, #84]	; 0x54
 8005190:	463b      	mov	r3, r7
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	011a      	lsls	r2, r3, #4
 8005198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519a:	4413      	add	r3, r2
 800519c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a0:	653b      	str	r3, [r7, #80]	; 0x50
 80051a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	891b      	ldrh	r3, [r3, #8]
 80051b2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6959      	ldr	r1, [r3, #20]
 80051bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051c6:	1d38      	adds	r0, r7, #4
 80051c8:	6800      	ldr	r0, [r0, #0]
 80051ca:	f000 ffd1 	bl	8006170 <USB_WritePMA>
            ep->xfer_buff += len;
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051d8:	441a      	add	r2, r3
 80051da:	463b      	mov	r3, r7
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6a1a      	ldr	r2, [r3, #32]
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d909      	bls.n	8005204 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fa:	1ad2      	subs	r2, r2, r3
 80051fc:	463b      	mov	r3, r7
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	621a      	str	r2, [r3, #32]
 8005202:	e008      	b.n	8005216 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005204:	463b      	mov	r3, r7
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005216:	1d3b      	adds	r3, r7, #4
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	647b      	str	r3, [r7, #68]	; 0x44
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d164      	bne.n	80052f0 <USB_EPStartXfer+0x63c>
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005234:	b29b      	uxth	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	4413      	add	r3, r2
 800523c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523e:	463b      	mov	r3, r7
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	011a      	lsls	r2, r3, #4
 8005246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005248:	4413      	add	r3, r2
 800524a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800524e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d112      	bne.n	800527e <USB_EPStartXfer+0x5ca>
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005262:	b29a      	uxth	r2, r3
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005276:	b29a      	uxth	r2, r3
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	e054      	b.n	8005328 <USB_EPStartXfer+0x674>
 800527e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005282:	2b3e      	cmp	r3, #62	; 0x3e
 8005284:	d817      	bhi.n	80052b6 <USB_EPStartXfer+0x602>
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <USB_EPStartXfer+0x5f2>
 800529c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052a0:	3301      	adds	r3, #1
 80052a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	029b      	lsls	r3, r3, #10
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	e038      	b.n	8005328 <USB_EPStartXfer+0x674>
 80052b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <USB_EPStartXfer+0x622>
 80052cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052d0:	3b01      	subs	r3, #1
 80052d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80052d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052da:	b29b      	uxth	r3, r3
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e01b      	b.n	8005328 <USB_EPStartXfer+0x674>
 80052f0:	463b      	mov	r3, r7
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d116      	bne.n	8005328 <USB_EPStartXfer+0x674>
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005302:	b29b      	uxth	r3, r3
 8005304:	461a      	mov	r2, r3
 8005306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005308:	4413      	add	r3, r2
 800530a:	647b      	str	r3, [r7, #68]	; 0x44
 800530c:	463b      	mov	r3, r7
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	011a      	lsls	r2, r3, #4
 8005314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005316:	4413      	add	r3, r2
 8005318:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800531c:	643b      	str	r3, [r7, #64]	; 0x40
 800531e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005322:	b29a      	uxth	r2, r3
 8005324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005326:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005328:	463b      	mov	r3, r7
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	895b      	ldrh	r3, [r3, #10]
 800532e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6959      	ldr	r1, [r3, #20]
 8005338:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533c:	b29b      	uxth	r3, r3
 800533e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005342:	1d38      	adds	r0, r7, #4
 8005344:	6800      	ldr	r0, [r0, #0]
 8005346:	f000 ff13 	bl	8006170 <USB_WritePMA>
 800534a:	e1e2      	b.n	8005712 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800534c:	463b      	mov	r3, r7
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005356:	1d3b      	adds	r3, r7, #4
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	463b      	mov	r3, r7
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800536c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005370:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005374:	1d3b      	adds	r3, r7, #4
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	441a      	add	r2, r3
 8005382:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800539a:	1d3b      	adds	r3, r7, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	663b      	str	r3, [r7, #96]	; 0x60
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053ae:	4413      	add	r3, r2
 80053b0:	663b      	str	r3, [r7, #96]	; 0x60
 80053b2:	463b      	mov	r3, r7
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	011a      	lsls	r2, r3, #4
 80053ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053bc:	4413      	add	r3, r2
 80053be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053ce:	463b      	mov	r3, r7
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	891b      	ldrh	r3, [r3, #8]
 80053d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6959      	ldr	r1, [r3, #20]
 80053de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80053e8:	1d38      	adds	r0, r7, #4
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	f000 fec0 	bl	8006170 <USB_WritePMA>
 80053f0:	e18f      	b.n	8005712 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	463b      	mov	r3, r7
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 808f 	beq.w	800552c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800540e:	1d3b      	adds	r3, r7, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	67bb      	str	r3, [r7, #120]	; 0x78
 8005414:	463b      	mov	r3, r7
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d164      	bne.n	80054e8 <USB_EPStartXfer+0x834>
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	673b      	str	r3, [r7, #112]	; 0x70
 8005424:	1d3b      	adds	r3, r7, #4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542c:	b29b      	uxth	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005432:	4413      	add	r3, r2
 8005434:	673b      	str	r3, [r7, #112]	; 0x70
 8005436:	463b      	mov	r3, r7
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	011a      	lsls	r2, r3, #4
 800543e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005440:	4413      	add	r3, r2
 8005442:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005446:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d112      	bne.n	8005476 <USB_EPStartXfer+0x7c2>
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800545a:	b29a      	uxth	r2, r3
 800545c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800546a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546e:	b29a      	uxth	r2, r3
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	e054      	b.n	8005520 <USB_EPStartXfer+0x86c>
 8005476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547a:	2b3e      	cmp	r3, #62	; 0x3e
 800547c:	d817      	bhi.n	80054ae <USB_EPStartXfer+0x7fa>
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <USB_EPStartXfer+0x7ea>
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	3301      	adds	r3, #1
 800549a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e038      	b.n	8005520 <USB_EPStartXfer+0x86c>
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <USB_EPStartXfer+0x81a>
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	3b01      	subs	r3, #1
 80054ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	029b      	lsls	r3, r3, #10
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e01b      	b.n	8005520 <USB_EPStartXfer+0x86c>
 80054e8:	463b      	mov	r3, r7
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d116      	bne.n	8005520 <USB_EPStartXfer+0x86c>
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005500:	4413      	add	r3, r2
 8005502:	67bb      	str	r3, [r7, #120]	; 0x78
 8005504:	463b      	mov	r3, r7
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	011a      	lsls	r2, r3, #4
 800550c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550e:	4413      	add	r3, r2
 8005510:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005514:	677b      	str	r3, [r7, #116]	; 0x74
 8005516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551a:	b29a      	uxth	r2, r3
 800551c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005520:	463b      	mov	r3, r7
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	895b      	ldrh	r3, [r3, #10]
 8005526:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800552a:	e097      	b.n	800565c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800552c:	463b      	mov	r3, r7
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d168      	bne.n	8005608 <USB_EPStartXfer+0x954>
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800554e:	4413      	add	r3, r2
 8005550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	011a      	lsls	r2, r3, #4
 800555c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005560:	4413      	add	r3, r2
 8005562:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005566:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d112      	bne.n	8005596 <USB_EPStartXfer+0x8e2>
 8005570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800557a:	b29a      	uxth	r2, r3
 800557c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558e:	b29a      	uxth	r2, r3
 8005590:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	e05d      	b.n	8005652 <USB_EPStartXfer+0x99e>
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559a:	2b3e      	cmp	r3, #62	; 0x3e
 800559c:	d817      	bhi.n	80055ce <USB_EPStartXfer+0x91a>
 800559e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d004      	beq.n	80055be <USB_EPStartXfer+0x90a>
 80055b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055b8:	3301      	adds	r3, #1
 80055ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	029b      	lsls	r3, r3, #10
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e041      	b.n	8005652 <USB_EPStartXfer+0x99e>
 80055ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <USB_EPStartXfer+0x93a>
 80055e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055e8:	3b01      	subs	r3, #1
 80055ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005600:	b29a      	uxth	r2, r3
 8005602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	e024      	b.n	8005652 <USB_EPStartXfer+0x99e>
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d11f      	bne.n	8005652 <USB_EPStartXfer+0x99e>
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800562a:	4413      	add	r3, r2
 800562c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005630:	463b      	mov	r3, r7
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	011a      	lsls	r2, r3, #4
 8005638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800563c:	4413      	add	r3, r2
 800563e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005642:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800564a:	b29a      	uxth	r2, r3
 800564c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005650:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	891b      	ldrh	r3, [r3, #8]
 8005658:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6959      	ldr	r1, [r3, #20]
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005666:	b29b      	uxth	r3, r3
 8005668:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800566c:	1d38      	adds	r0, r7, #4
 800566e:	6800      	ldr	r0, [r0, #0]
 8005670:	f000 fd7e 	bl	8006170 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005674:	463b      	mov	r3, r7
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d122      	bne.n	80056c4 <USB_EPStartXfer+0xa10>
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005698:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	463b      	mov	r3, r7
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80056ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056be:	b29b      	uxth	r3, r3
 80056c0:	8013      	strh	r3, [r2, #0]
 80056c2:	e026      	b.n	8005712 <USB_EPStartXfer+0xa5e>
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d121      	bne.n	8005712 <USB_EPStartXfer+0xa5e>
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	441a      	add	r2, r3
 80056fa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80056fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800570a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570e:	b29b      	uxth	r3, r3
 8005710:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005712:	1d3b      	adds	r3, r7, #4
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f107 020e 	add.w	r2, r7, #14
 8005728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005730:	8013      	strh	r3, [r2, #0]
 8005732:	f107 030e 	add.w	r3, r7, #14
 8005736:	f107 020e 	add.w	r2, r7, #14
 800573a:	8812      	ldrh	r2, [r2, #0]
 800573c:	f082 0210 	eor.w	r2, r2, #16
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	f107 030e 	add.w	r3, r7, #14
 8005746:	f107 020e 	add.w	r2, r7, #14
 800574a:	8812      	ldrh	r2, [r2, #0]
 800574c:	f082 0220 	eor.w	r2, r2, #32
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	f107 030e 	add.w	r3, r7, #14
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005776:	b29b      	uxth	r3, r3
 8005778:	8013      	strh	r3, [r2, #0]
 800577a:	e3b5      	b.n	8005ee8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800577c:	463b      	mov	r3, r7
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	7b1b      	ldrb	r3, [r3, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 8090 	bne.w	80058a8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	429a      	cmp	r2, r3
 8005796:	d90e      	bls.n	80057b6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005798:	463b      	mov	r3, r7
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ac:	1ad2      	subs	r2, r2, r3
 80057ae:	463b      	mov	r3, r7
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	619a      	str	r2, [r3, #24]
 80057b4:	e008      	b.n	80057c8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d8:	b29b      	uxth	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057e0:	4413      	add	r3, r2
 80057e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80057e6:	463b      	mov	r3, r7
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	011a      	lsls	r2, r3, #4
 80057ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057f2:	4413      	add	r3, r2
 80057f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d116      	bne.n	8005832 <USB_EPStartXfer+0xb7e>
 8005804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29b      	uxth	r3, r3
 800580c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005810:	b29a      	uxth	r2, r3
 8005812:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005828:	b29a      	uxth	r2, r3
 800582a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	e32c      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005836:	2b3e      	cmp	r3, #62	; 0x3e
 8005838:	d818      	bhi.n	800586c <USB_EPStartXfer+0xbb8>
 800583a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <USB_EPStartXfer+0xba6>
 8005850:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005854:	3301      	adds	r3, #1
 8005856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800585a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800585e:	b29b      	uxth	r3, r3
 8005860:	029b      	lsls	r3, r3, #10
 8005862:	b29a      	uxth	r2, r3
 8005864:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	e30f      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
 800586c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <USB_EPStartXfer+0xbd8>
 8005882:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005886:	3b01      	subs	r3, #1
 8005888:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800588c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005890:	b29b      	uxth	r3, r3
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	b29b      	uxth	r3, r3
 8005896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800589a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589e:	b29a      	uxth	r2, r3
 80058a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e2f1      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	78db      	ldrb	r3, [r3, #3]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	f040 818f 	bne.w	8005bd2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058b4:	463b      	mov	r3, r7
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d175      	bne.n	80059aa <USB_EPStartXfer+0xcf6>
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058d6:	4413      	add	r3, r2
 80058d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058dc:	463b      	mov	r3, r7
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	011a      	lsls	r2, r3, #4
 80058e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80058e8:	4413      	add	r3, r2
 80058ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058f2:	463b      	mov	r3, r7
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d116      	bne.n	800592a <USB_EPStartXfer+0xc76>
 80058fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005920:	b29a      	uxth	r2, r3
 8005922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e065      	b.n	80059f6 <USB_EPStartXfer+0xd42>
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b3e      	cmp	r3, #62	; 0x3e
 8005932:	d81a      	bhi.n	800596a <USB_EPStartXfer+0xcb6>
 8005934:	463b      	mov	r3, r7
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <USB_EPStartXfer+0xca4>
 800594e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005952:	3301      	adds	r3, #1
 8005954:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005958:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800595c:	b29b      	uxth	r3, r3
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	b29a      	uxth	r2, r3
 8005962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005966:	801a      	strh	r2, [r3, #0]
 8005968:	e045      	b.n	80059f6 <USB_EPStartXfer+0xd42>
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f003 031f 	and.w	r3, r3, #31
 8005980:	2b00      	cmp	r3, #0
 8005982:	d104      	bne.n	800598e <USB_EPStartXfer+0xcda>
 8005984:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005988:	3b01      	subs	r3, #1
 800598a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800598e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005992:	b29b      	uxth	r3, r3
 8005994:	029b      	lsls	r3, r3, #10
 8005996:	b29b      	uxth	r3, r3
 8005998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800599c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	e025      	b.n	80059f6 <USB_EPStartXfer+0xd42>
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d120      	bne.n	80059f6 <USB_EPStartXfer+0xd42>
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059bc:	1d3b      	adds	r3, r7, #4
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059cc:	4413      	add	r3, r2
 80059ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	011a      	lsls	r2, r3, #4
 80059da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059de:	4413      	add	r3, r2
 80059e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059e8:	463b      	mov	r3, r7
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d175      	bne.n	8005af4 <USB_EPStartXfer+0xe40>
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a20:	4413      	add	r3, r2
 8005a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a26:	463b      	mov	r3, r7
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	011a      	lsls	r2, r3, #4
 8005a2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a32:	4413      	add	r3, r2
 8005a34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a3c:	463b      	mov	r3, r7
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d116      	bne.n	8005a74 <USB_EPStartXfer+0xdc0>
 8005a46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a58:	801a      	strh	r2, [r3, #0]
 8005a5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e061      	b.n	8005b38 <USB_EPStartXfer+0xe84>
 8005a74:	463b      	mov	r3, r7
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a7c:	d81a      	bhi.n	8005ab4 <USB_EPStartXfer+0xe00>
 8005a7e:	463b      	mov	r3, r7
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USB_EPStartXfer+0xdee>
 8005a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e041      	b.n	8005b38 <USB_EPStartXfer+0xe84>
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <USB_EPStartXfer+0xe24>
 8005ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	029b      	lsls	r3, r3, #10
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	e021      	b.n	8005b38 <USB_EPStartXfer+0xe84>
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d11c      	bne.n	8005b38 <USB_EPStartXfer+0xe84>
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b0e:	4413      	add	r3, r2
 8005b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b14:	463b      	mov	r3, r7
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 81a4 	beq.w	8005e8c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b44:	1d3b      	adds	r3, r7, #4
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	463b      	mov	r3, r7
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b58:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <USB_EPStartXfer+0xebc>
 8005b64:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10d      	bne.n	8005b8c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 8187 	bne.w	8005e8c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b7e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f040 8180 	bne.w	8005e8c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b8c:	1d3b      	adds	r3, r7, #4
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	463b      	mov	r3, r7
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005baa:	1d3b      	adds	r3, r7, #4
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8013      	strh	r3, [r2, #0]
 8005bd0:	e15c      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	78db      	ldrb	r3, [r3, #3]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	f040 8155 	bne.w	8005e88 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bde:	463b      	mov	r3, r7
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d90e      	bls.n	8005c0c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	463b      	mov	r3, r7
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	619a      	str	r2, [r3, #24]
 8005c0a:	e008      	b.n	8005c1e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c1e:	463b      	mov	r3, r7
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d16f      	bne.n	8005d08 <USB_EPStartXfer+0x1054>
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c30:	1d3b      	adds	r3, r7, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c40:	4413      	add	r3, r2
 8005c42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	011a      	lsls	r2, r3, #4
 8005c4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c52:	4413      	add	r3, r2
 8005c54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d116      	bne.n	8005c92 <USB_EPStartXfer+0xfde>
 8005c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e05f      	b.n	8005d52 <USB_EPStartXfer+0x109e>
 8005c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c96:	2b3e      	cmp	r3, #62	; 0x3e
 8005c98:	d818      	bhi.n	8005ccc <USB_EPStartXfer+0x1018>
 8005c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <USB_EPStartXfer+0x1006>
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	029b      	lsls	r3, r3, #10
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	e042      	b.n	8005d52 <USB_EPStartXfer+0x109e>
 8005ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <USB_EPStartXfer+0x1038>
 8005ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	029b      	lsls	r3, r3, #10
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	e024      	b.n	8005d52 <USB_EPStartXfer+0x109e>
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	785b      	ldrb	r3, [r3, #1]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d11f      	bne.n	8005d52 <USB_EPStartXfer+0x109e>
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	011a      	lsls	r2, r3, #4
 8005d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d16f      	bne.n	8005e44 <USB_EPStartXfer+0x1190>
 8005d64:	1d3b      	adds	r3, r7, #4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d6c:	1d3b      	adds	r3, r7, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	011a      	lsls	r2, r3, #4
 8005d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d8e:	4413      	add	r3, r2
 8005d90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d116      	bne.n	8005dce <USB_EPStartXfer+0x111a>
 8005da0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e05e      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
 8005dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005dd4:	d818      	bhi.n	8005e08 <USB_EPStartXfer+0x1154>
 8005dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <USB_EPStartXfer+0x1142>
 8005dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df0:	3301      	adds	r3, #1
 8005df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	029b      	lsls	r3, r3, #10
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	e041      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
 8005e08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e16:	f003 031f 	and.w	r3, r3, #31
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <USB_EPStartXfer+0x1174>
 8005e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e22:	3b01      	subs	r3, #1
 8005e24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	029b      	lsls	r3, r3, #10
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	e023      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d11e      	bne.n	8005e8c <USB_EPStartXfer+0x11d8>
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e5e:	4413      	add	r3, r2
 8005e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e64:	463b      	mov	r3, r7
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	011a      	lsls	r2, r3, #4
 8005e6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e70:	4413      	add	r3, r2
 8005e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e001      	b.n	8005e8c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e02e      	b.n	8005eea <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	463b      	mov	r3, r7
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005eaa:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005eae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005eb2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005eb6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005eba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ebe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005ec2:	1d3b      	adds	r3, r7, #4
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	441a      	add	r2, r3
 8005ed0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d020      	beq.n	8005f48 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1c:	81bb      	strh	r3, [r7, #12]
 8005f1e:	89bb      	ldrh	r3, [r7, #12]
 8005f20:	f083 0310 	eor.w	r3, r3, #16
 8005f24:	81bb      	strh	r3, [r7, #12]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	441a      	add	r2, r3
 8005f30:	89bb      	ldrh	r3, [r7, #12]
 8005f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	8013      	strh	r3, [r2, #0]
 8005f46:	e01f      	b.n	8005f88 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	81fb      	strh	r3, [r7, #14]
 8005f60:	89fb      	ldrh	r3, [r7, #14]
 8005f62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f66:	81fb      	strh	r3, [r7, #14]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	89fb      	ldrh	r3, [r7, #14]
 8005f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr

08005f94 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	7b1b      	ldrb	r3, [r3, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 809d 	bne.w	80060e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d04c      	beq.n	800604a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	823b      	strh	r3, [r7, #16]
 8005fbe:	8a3b      	ldrh	r3, [r7, #16]
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01b      	beq.n	8006000 <USB_EPClearStall+0x6c>
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	81fb      	strh	r3, [r7, #14]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	89fb      	ldrh	r3, [r7, #14]
 8005fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	78db      	ldrb	r3, [r3, #3]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d06c      	beq.n	80060e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601e:	81bb      	strh	r3, [r7, #12]
 8006020:	89bb      	ldrh	r3, [r7, #12]
 8006022:	f083 0320 	eor.w	r3, r3, #32
 8006026:	81bb      	strh	r3, [r7, #12]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	89bb      	ldrh	r3, [r7, #12]
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
 8006048:	e04b      	b.n	80060e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	82fb      	strh	r3, [r7, #22]
 8006058:	8afb      	ldrh	r3, [r7, #22]
 800605a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01b      	beq.n	800609a <USB_EPClearStall+0x106>
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006078:	82bb      	strh	r3, [r7, #20]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	441a      	add	r2, r3
 8006084:	8abb      	ldrh	r3, [r7, #20]
 8006086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800608e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	827b      	strh	r3, [r7, #18]
 80060b2:	8a7b      	ldrh	r3, [r7, #18]
 80060b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060b8:	827b      	strh	r3, [r7, #18]
 80060ba:	8a7b      	ldrh	r3, [r7, #18]
 80060bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060c0:	827b      	strh	r3, [r7, #18]
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	441a      	add	r2, r3
 80060cc:	8a7b      	ldrh	r3, [r7, #18]
 80060ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060de:	b29b      	uxth	r3, r3
 80060e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr

080060ee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d103      	bne.n	8006108 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2280      	movs	r2, #128	; 0x80
 8006104:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr

0800613c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800614a:	b29b      	uxth	r3, r3
 800614c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800614e:	68fb      	ldr	r3, [r7, #12]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr

08006170 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006170:	b480      	push	{r7}
 8006172:	b08d      	sub	sp, #52	; 0x34
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	4611      	mov	r1, r2
 800617c:	461a      	mov	r2, r3
 800617e:	460b      	mov	r3, r1
 8006180:	80fb      	strh	r3, [r7, #6]
 8006182:	4613      	mov	r3, r2
 8006184:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006186:	88bb      	ldrh	r3, [r7, #4]
 8006188:	3301      	adds	r3, #1
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	005a      	lsls	r2, r3, #1
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a8:	e01e      	b.n	80061e8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	3301      	adds	r3, #1
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	3302      	adds	r3, #2
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	3302      	adds	r3, #2
 80061da:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	3301      	adds	r3, #1
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	3b01      	subs	r3, #1
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1dd      	bne.n	80061aa <USB_WritePMA+0x3a>
  }
}
 80061ee:	bf00      	nop
 80061f0:	3734      	adds	r7, #52	; 0x34
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	4770      	bx	lr

080061f8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b08b      	sub	sp, #44	; 0x2c
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	460b      	mov	r3, r1
 8006208:	80fb      	strh	r3, [r7, #6]
 800620a:	4613      	mov	r3, r2
 800620c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800620e:	88bb      	ldrh	r3, [r7, #4]
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	b29b      	uxth	r3, r3
 8006214:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	005a      	lsls	r2, r3, #1
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	627b      	str	r3, [r7, #36]	; 0x24
 8006230:	e01b      	b.n	800626a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29b      	uxth	r3, r3
 8006238:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	3302      	adds	r3, #2
 800623e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	3301      	adds	r3, #1
 800624c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	b2da      	uxtb	r2, r3
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	3301      	adds	r3, #1
 800625c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	3302      	adds	r3, #2
 8006262:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	3b01      	subs	r3, #1
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1e0      	bne.n	8006232 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006270:	88bb      	ldrh	r3, [r7, #4]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	701a      	strb	r2, [r3, #0]
  }
}
 800628c:	bf00      	nop
 800628e:	372c      	adds	r7, #44	; 0x2c
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	7c1b      	ldrb	r3, [r3, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d115      	bne.n	80062da <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062b2:	2202      	movs	r2, #2
 80062b4:	2181      	movs	r1, #129	; 0x81
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fe1f 	bl	8007efa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c6:	2202      	movs	r2, #2
 80062c8:	2101      	movs	r1, #1
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fe15 	bl	8007efa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80062d8:	e012      	b.n	8006300 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062da:	2340      	movs	r3, #64	; 0x40
 80062dc:	2202      	movs	r2, #2
 80062de:	2181      	movs	r1, #129	; 0x81
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fe0a 	bl	8007efa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	2202      	movs	r2, #2
 80062f0:	2101      	movs	r1, #1
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fe01 	bl	8007efa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006300:	2308      	movs	r3, #8
 8006302:	2203      	movs	r2, #3
 8006304:	2182      	movs	r1, #130	; 0x82
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 fdf7 	bl	8007efa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006312:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006316:	f001 ff17 	bl	8008148 <USBD_static_malloc>
 800631a:	4602      	mov	r2, r0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
 8006330:	e026      	b.n	8006380 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006338:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	7c1b      	ldrb	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006366:	2101      	movs	r1, #1
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f001 feb7 	bl	80080dc <USBD_LL_PrepareReceive>
 800636e:	e007      	b.n	8006380 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006376:	2340      	movs	r3, #64	; 0x40
 8006378:	2101      	movs	r1, #1
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 feae 	bl	80080dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800639a:	2181      	movs	r1, #129	; 0x81
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f001 fdd2 	bl	8007f46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063a8:	2101      	movs	r1, #1
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fdcb 	bl	8007f46 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063b8:	2182      	movs	r1, #130	; 0x82
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 fdc3 	bl	8007f46 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	4618      	mov	r0, r3
 80063e2:	f001 febd 	bl	8008160 <USBD_static_free>
    pdev->pClassData = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006408:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800641e:	2b00      	cmp	r3, #0
 8006420:	d039      	beq.n	8006496 <USBD_CDC_Setup+0x9e>
 8006422:	2b20      	cmp	r3, #32
 8006424:	d17c      	bne.n	8006520 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	88db      	ldrh	r3, [r3, #6]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d029      	beq.n	8006482 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b25b      	sxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	da11      	bge.n	800645c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006444:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	88d2      	ldrh	r2, [r2, #6]
 800644a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800644c:	6939      	ldr	r1, [r7, #16]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	88db      	ldrh	r3, [r3, #6]
 8006452:	461a      	mov	r2, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 f9c9 	bl	80077ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800645a:	e068      	b.n	800652e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785a      	ldrb	r2, [r3, #1]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88db      	ldrh	r3, [r3, #6]
 800646a:	b2da      	uxtb	r2, r3
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006472:	6939      	ldr	r1, [r7, #16]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	88db      	ldrh	r3, [r3, #6]
 8006478:	461a      	mov	r2, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f9e4 	bl	8007848 <USBD_CtlPrepareRx>
      break;
 8006480:	e055      	b.n	800652e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	7850      	ldrb	r0, [r2, #1]
 800648e:	2200      	movs	r2, #0
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	4798      	blx	r3
      break;
 8006494:	e04b      	b.n	800652e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b0a      	cmp	r3, #10
 800649c:	d017      	beq.n	80064ce <USBD_CDC_Setup+0xd6>
 800649e:	2b0b      	cmp	r3, #11
 80064a0:	d029      	beq.n	80064f6 <USBD_CDC_Setup+0xfe>
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d133      	bne.n	800650e <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d107      	bne.n	80064c0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064b0:	f107 030c 	add.w	r3, r7, #12
 80064b4:	2202      	movs	r2, #2
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 f997 	bl	80077ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064be:	e02e      	b.n	800651e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80064c0:	6839      	ldr	r1, [r7, #0]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 f928 	bl	8007718 <USBD_CtlError>
            ret = USBD_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	75fb      	strb	r3, [r7, #23]
          break;
 80064cc:	e027      	b.n	800651e <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d107      	bne.n	80064e8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064d8:	f107 030f 	add.w	r3, r7, #15
 80064dc:	2201      	movs	r2, #1
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f983 	bl	80077ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064e6:	e01a      	b.n	800651e <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f001 f914 	bl	8007718 <USBD_CtlError>
            ret = USBD_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	75fb      	strb	r3, [r7, #23]
          break;
 80064f4:	e013      	b.n	800651e <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d00d      	beq.n	800651c <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 f908 	bl	8007718 <USBD_CtlError>
            ret = USBD_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800650c:	e006      	b.n	800651c <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 f901 	bl	8007718 <USBD_CtlError>
          ret = USBD_FAIL;
 8006516:	2302      	movs	r3, #2
 8006518:	75fb      	strb	r3, [r7, #23]
          break;
 800651a:	e000      	b.n	800651e <USBD_CDC_Setup+0x126>
          break;
 800651c:	bf00      	nop
      }
      break;
 800651e:	e006      	b.n	800652e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 f8f8 	bl	8007718 <USBD_CtlError>
      ret = USBD_FAIL;
 8006528:	2302      	movs	r3, #2
 800652a:	75fb      	strb	r3, [r7, #23]
      break;
 800652c:	bf00      	nop
  }

  return ret;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006552:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03a      	beq.n	80065d4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800655e:	78fa      	ldrb	r2, [r7, #3]
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	331c      	adds	r3, #28
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d029      	beq.n	80065c8 <USBD_CDC_DataIn+0x90>
 8006574:	78fa      	ldrb	r2, [r7, #3]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	331c      	adds	r3, #28
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	78f9      	ldrb	r1, [r7, #3]
 8006588:	68b8      	ldr	r0, [r7, #8]
 800658a:	460b      	mov	r3, r1
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	4403      	add	r3, r0
 8006594:	3338      	adds	r3, #56	; 0x38
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	fbb2 f1f3 	udiv	r1, r2, r3
 800659c:	fb03 f301 	mul.w	r3, r3, r1
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d110      	bne.n	80065c8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	331c      	adds	r3, #28
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065ba:	78f9      	ldrb	r1, [r7, #3]
 80065bc:	2300      	movs	r3, #0
 80065be:	2200      	movs	r2, #0
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 fd68 	bl	8008096 <USBD_LL_Transmit>
 80065c6:	e003      	b.n	80065d0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	e000      	b.n	80065d6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80065d4:	2302      	movs	r3, #2
  }
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fd93 	bl	8008122 <USBD_LL_GetRxDataSize>
 80065fc:	4602      	mov	r2, r0
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00d      	beq.n	800662a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006622:	4611      	mov	r1, r2
 8006624:	4798      	blx	r3

    return USBD_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e000      	b.n	800662c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800664a:	2b00      	cmp	r3, #0
 800664c:	d015      	beq.n	800667a <USBD_CDC_EP0_RxReady+0x46>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006654:	2bff      	cmp	r3, #255	; 0xff
 8006656:	d010      	beq.n	800667a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006666:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800666e:	b292      	uxth	r2, r2
 8006670:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	22ff      	movs	r2, #255	; 0xff
 8006676:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2243      	movs	r2, #67	; 0x43
 8006690:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006692:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	200000a8 	.word	0x200000a8

080066a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2243      	movs	r2, #67	; 0x43
 80066b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80066b2:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000064 	.word	0x20000064

080066c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2243      	movs	r2, #67	; 0x43
 80066d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80066d2:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	200000ec 	.word	0x200000ec

080066e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	220a      	movs	r2, #10
 80066f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80066f2:	4b03      	ldr	r3, [pc, #12]	; (8006700 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bc80      	pop	{r7}
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000020 	.word	0x20000020

08006704 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800670e:	2302      	movs	r3, #2
 8006710:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr

08006730 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006744:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800674e:	88fa      	ldrh	r2, [r7, #6]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	bc80      	pop	{r7}
 8006760:	4770      	bx	lr

08006762 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006796:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d017      	beq.n	80067d2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	7c1b      	ldrb	r3, [r3, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fc90 	bl	80080dc <USBD_LL_PrepareReceive>
 80067bc:	e007      	b.n	80067ce <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	2101      	movs	r1, #1
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f001 fc87 	bl	80080dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e000      	b.n	80067d4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80067d2:	2302      	movs	r3, #2
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4613      	mov	r3, r2
 80067e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	e01a      	b.n	800682a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	79fa      	ldrb	r2, [r7, #7]
 8006820:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f001 faf4 	bl	8007e10 <USBD_LL_Init>

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006832:	b480      	push	{r7}
 8006834:	b085      	sub	sp, #20
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d006      	beq.n	8006854 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	73fb      	strb	r3, [r7, #15]
 8006852:	e001      	b.n	8006858 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006854:	2302      	movs	r3, #2
 8006856:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr

08006864 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fb29 	bl	8007ec4 <USBD_LL_Start>

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	bc80      	pop	{r7}
 800688e:	4770      	bx	lr

08006890 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800689c:	2302      	movs	r3, #2
 800689e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	4611      	mov	r1, r2
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	4611      	mov	r1, r2
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3

  return USBD_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 feca 	bl	80076a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	2b01      	cmp	r3, #1
 800692e:	d00c      	beq.n	800694a <USBD_LL_SetupStage+0x56>
 8006930:	2b01      	cmp	r3, #1
 8006932:	d302      	bcc.n	800693a <USBD_LL_SetupStage+0x46>
 8006934:	2b02      	cmp	r3, #2
 8006936:	d010      	beq.n	800695a <USBD_LL_SetupStage+0x66>
 8006938:	e017      	b.n	800696a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9ca 	bl	8006cdc <USBD_StdDevReq>
      break;
 8006948:	e01a      	b.n	8006980 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fa2c 	bl	8006db0 <USBD_StdItfReq>
      break;
 8006958:	e012      	b.n	8006980 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa6a 	bl	8006e3c <USBD_StdEPReq>
      break;
 8006968:	e00a      	b.n	8006980 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006970:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f001 fb03 	bl	8007f84 <USBD_LL_StallEP>
      break;
 800697e:	bf00      	nop
  }

  return USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	460b      	mov	r3, r1
 8006994:	607a      	str	r2, [r7, #4]
 8006996:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d14b      	bne.n	8006a36 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d134      	bne.n	8006a1a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d919      	bls.n	80069f0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	1ad2      	subs	r2, r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d203      	bcs.n	80069de <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80069da:	b29b      	uxth	r3, r3
 80069dc:	e002      	b.n	80069e4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 ff4b 	bl	8007884 <USBD_CtlContinueRx>
 80069ee:	e038      	b.n	8006a62 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d105      	bne.n	8006a12 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 ff48 	bl	80078a8 <USBD_CtlSendStatus>
 8006a18:	e023      	b.n	8006a62 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a20:	2b05      	cmp	r3, #5
 8006a22:	d11e      	bne.n	8006a62 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 faa8 	bl	8007f84 <USBD_LL_StallEP>
 8006a34:	e015      	b.n	8006a62 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00d      	beq.n	8006a5e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d108      	bne.n	8006a5e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	7afa      	ldrb	r2, [r7, #11]
 8006a56:	4611      	mov	r1, r2
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	4798      	blx	r3
 8006a5c:	e001      	b.n	8006a62 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e000      	b.n	8006a64 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	460b      	mov	r3, r1
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d17f      	bne.n	8006b80 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3314      	adds	r3, #20
 8006a84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d15c      	bne.n	8006b4a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	68da      	ldr	r2, [r3, #12]
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d915      	bls.n	8006ac8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 feb5 	bl	8007824 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aba:	2300      	movs	r3, #0
 8006abc:	2200      	movs	r2, #0
 8006abe:	2100      	movs	r1, #0
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f001 fb0b 	bl	80080dc <USBD_LL_PrepareReceive>
 8006ac6:	e04e      	b.n	8006b66 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	6912      	ldr	r2, [r2, #16]
 8006ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad4:	fb02 f201 	mul.w	r2, r2, r1
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d11c      	bne.n	8006b18 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d316      	bcc.n	8006b18 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d20f      	bcs.n	8006b18 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006af8:	2200      	movs	r2, #0
 8006afa:	2100      	movs	r1, #0
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fe91 	bl	8007824 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f001 fae3 	bl	80080dc <USBD_LL_PrepareReceive>
 8006b16:	e026      	b.n	8006b66 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d105      	bne.n	8006b3a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006b3a:	2180      	movs	r1, #128	; 0x80
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f001 fa21 	bl	8007f84 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fec3 	bl	80078ce <USBD_CtlReceiveStatus>
 8006b48:	e00d      	b.n	8006b66 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d004      	beq.n	8006b5e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006b5e:	2180      	movs	r1, #128	; 0x80
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f001 fa0f 	bl	8007f84 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d11d      	bne.n	8006bac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff fe83 	bl	800687c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b7e:	e015      	b.n	8006bac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00d      	beq.n	8006ba8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d108      	bne.n	8006ba8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	7afa      	ldrb	r2, [r7, #11]
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	4798      	blx	r3
 8006ba6:	e001      	b.n	8006bac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	e000      	b.n	8006bae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bbe:	2340      	movs	r3, #64	; 0x40
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 f998 	bl	8007efa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2240      	movs	r2, #64	; 0x40
 8006bd6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bda:	2340      	movs	r3, #64	; 0x40
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2180      	movs	r1, #128	; 0x80
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f98a 	bl	8007efa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2240      	movs	r2, #64	; 0x40
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d009      	beq.n	8006c2e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6852      	ldr	r2, [r2, #4]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	4611      	mov	r1, r2
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
  }

  return USBD_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bc80      	pop	{r7}
 8006c54:	4770      	bx	lr

08006c56 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b083      	sub	sp, #12
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr

08006c7e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d105      	bne.n	8006c9c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d10b      	bne.n	8006cd2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d005      	beq.n	8006cd2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	d004      	beq.n	8006d00 <USBD_StdDevReq+0x24>
 8006cf6:	2b40      	cmp	r3, #64	; 0x40
 8006cf8:	d002      	beq.n	8006d00 <USBD_StdDevReq+0x24>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d008      	beq.n	8006d10 <USBD_StdDevReq+0x34>
 8006cfe:	e04c      	b.n	8006d9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
      break;
 8006d0e:	e049      	b.n	8006da4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	d83a      	bhi.n	8006d8e <USBD_StdDevReq+0xb2>
 8006d18:	a201      	add	r2, pc, #4	; (adr r2, 8006d20 <USBD_StdDevReq+0x44>)
 8006d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1e:	bf00      	nop
 8006d20:	08006d71 	.word	0x08006d71
 8006d24:	08006d85 	.word	0x08006d85
 8006d28:	08006d8f 	.word	0x08006d8f
 8006d2c:	08006d7b 	.word	0x08006d7b
 8006d30:	08006d8f 	.word	0x08006d8f
 8006d34:	08006d53 	.word	0x08006d53
 8006d38:	08006d49 	.word	0x08006d49
 8006d3c:	08006d8f 	.word	0x08006d8f
 8006d40:	08006d67 	.word	0x08006d67
 8006d44:	08006d5d 	.word	0x08006d5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f9d4 	bl	80070f8 <USBD_GetDescriptor>
          break;
 8006d50:	e022      	b.n	8006d98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb37 	bl	80073c8 <USBD_SetAddress>
          break;
 8006d5a:	e01d      	b.n	8006d98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fb74 	bl	800744c <USBD_SetConfig>
          break;
 8006d64:	e018      	b.n	8006d98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fbfd 	bl	8007568 <USBD_GetConfig>
          break;
 8006d6e:	e013      	b.n	8006d98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fc2c 	bl	80075d0 <USBD_GetStatus>
          break;
 8006d78:	e00e      	b.n	8006d98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc5a 	bl	8007636 <USBD_SetFeature>
          break;
 8006d82:	e009      	b.n	8006d98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fc69 	bl	800765e <USBD_ClrFeature>
          break;
 8006d8c:	e004      	b.n	8006d98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fcc1 	bl	8007718 <USBD_CtlError>
          break;
 8006d96:	bf00      	nop
      }
      break;
 8006d98:	e004      	b.n	8006da4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fcbb 	bl	8007718 <USBD_CtlError>
      break;
 8006da2:	bf00      	nop
  }

  return ret;
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop

08006db0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d003      	beq.n	8006dd2 <USBD_StdItfReq+0x22>
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d001      	beq.n	8006dd2 <USBD_StdItfReq+0x22>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d12a      	bne.n	8006e28 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d81d      	bhi.n	8006e1a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	889b      	ldrh	r3, [r3, #4]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d813      	bhi.n	8006e10 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	88db      	ldrh	r3, [r3, #6]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d110      	bne.n	8006e24 <USBD_StdItfReq+0x74>
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fd4d 	bl	80078a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e0e:	e009      	b.n	8006e24 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fc80 	bl	8007718 <USBD_CtlError>
          break;
 8006e18:	e004      	b.n	8006e24 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc7b 	bl	8007718 <USBD_CtlError>
          break;
 8006e22:	e000      	b.n	8006e26 <USBD_StdItfReq+0x76>
          break;
 8006e24:	bf00      	nop
      }
      break;
 8006e26:	e004      	b.n	8006e32 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fc74 	bl	8007718 <USBD_CtlError>
      break;
 8006e30:	bf00      	nop
  }

  return USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	889b      	ldrh	r3, [r3, #4]
 8006e4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d004      	beq.n	8006e66 <USBD_StdEPReq+0x2a>
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	d002      	beq.n	8006e66 <USBD_StdEPReq+0x2a>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <USBD_StdEPReq+0x3a>
 8006e64:	e13d      	b.n	80070e2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
      break;
 8006e74:	e13a      	b.n	80070ec <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d10a      	bne.n	8006e98 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	e12a      	b.n	80070ee <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d03e      	beq.n	8006f1e <USBD_StdEPReq+0xe2>
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d002      	beq.n	8006eaa <USBD_StdEPReq+0x6e>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d070      	beq.n	8006f8a <USBD_StdEPReq+0x14e>
 8006ea8:	e115      	b.n	80070d6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d002      	beq.n	8006eba <USBD_StdEPReq+0x7e>
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d015      	beq.n	8006ee4 <USBD_StdEPReq+0xa8>
 8006eb8:	e02b      	b.n	8006f12 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00c      	beq.n	8006eda <USBD_StdEPReq+0x9e>
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b80      	cmp	r3, #128	; 0x80
 8006ec4:	d009      	beq.n	8006eda <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f85a 	bl	8007f84 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ed0:	2180      	movs	r1, #128	; 0x80
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f856 	bl	8007f84 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ed8:	e020      	b.n	8006f1c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fc1b 	bl	8007718 <USBD_CtlError>
              break;
 8006ee2:	e01b      	b.n	8006f1c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10e      	bne.n	8006f0a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <USBD_StdEPReq+0xce>
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b80      	cmp	r3, #128	; 0x80
 8006ef6:	d008      	beq.n	8006f0a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	88db      	ldrh	r3, [r3, #6]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	4619      	mov	r1, r3
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 f83d 	bl	8007f84 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fccc 	bl	80078a8 <USBD_CtlSendStatus>

              break;
 8006f10:	e004      	b.n	8006f1c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fbff 	bl	8007718 <USBD_CtlError>
              break;
 8006f1a:	bf00      	nop
          }
          break;
 8006f1c:	e0e0      	b.n	80070e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d002      	beq.n	8006f2e <USBD_StdEPReq+0xf2>
 8006f28:	2b03      	cmp	r3, #3
 8006f2a:	d015      	beq.n	8006f58 <USBD_StdEPReq+0x11c>
 8006f2c:	e026      	b.n	8006f7c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00c      	beq.n	8006f4e <USBD_StdEPReq+0x112>
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2b80      	cmp	r3, #128	; 0x80
 8006f38:	d009      	beq.n	8006f4e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 f820 	bl	8007f84 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f44:	2180      	movs	r1, #128	; 0x80
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 f81c 	bl	8007f84 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f4c:	e01c      	b.n	8006f88 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fbe1 	bl	8007718 <USBD_CtlError>
              break;
 8006f56:	e017      	b.n	8006f88 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	885b      	ldrh	r3, [r3, #2]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d112      	bne.n	8006f86 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f6a:	7bbb      	ldrb	r3, [r7, #14]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 f827 	bl	8007fc2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fc97 	bl	80078a8 <USBD_CtlSendStatus>
              }
              break;
 8006f7a:	e004      	b.n	8006f86 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fbca 	bl	8007718 <USBD_CtlError>
              break;
 8006f84:	e000      	b.n	8006f88 <USBD_StdEPReq+0x14c>
              break;
 8006f86:	bf00      	nop
          }
          break;
 8006f88:	e0aa      	b.n	80070e0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d002      	beq.n	8006f9a <USBD_StdEPReq+0x15e>
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d032      	beq.n	8006ffe <USBD_StdEPReq+0x1c2>
 8006f98:	e097      	b.n	80070ca <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <USBD_StdEPReq+0x174>
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b80      	cmp	r3, #128	; 0x80
 8006fa4:	d004      	beq.n	8006fb0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fbb5 	bl	8007718 <USBD_CtlError>
                break;
 8006fae:	e091      	b.n	80070d4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da0b      	bge.n	8006fd0 <USBD_StdEPReq+0x194>
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	3310      	adds	r3, #16
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	3304      	adds	r3, #4
 8006fce:	e00b      	b.n	8006fe8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fbf8 	bl	80077ec <USBD_CtlSendData>
              break;
 8006ffc:	e06a      	b.n	80070d4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007002:	2b00      	cmp	r3, #0
 8007004:	da11      	bge.n	800702a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	f003 020f 	and.w	r2, r3, #15
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	3318      	adds	r3, #24
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d117      	bne.n	8007050 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fb78 	bl	8007718 <USBD_CtlError>
                  break;
 8007028:	e054      	b.n	80070d4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	f003 020f 	and.w	r2, r3, #15
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fb65 	bl	8007718 <USBD_CtlError>
                  break;
 800704e:	e041      	b.n	80070d4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	da0b      	bge.n	8007070 <USBD_StdEPReq+0x234>
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800705e:	4613      	mov	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	3310      	adds	r3, #16
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	4413      	add	r3, r2
 800706c:	3304      	adds	r3, #4
 800706e:	e00b      	b.n	8007088 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	4413      	add	r3, r2
 8007086:	3304      	adds	r3, #4
 8007088:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <USBD_StdEPReq+0x25a>
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	2b80      	cmp	r3, #128	; 0x80
 8007094:	d103      	bne.n	800709e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
 800709c:	e00e      	b.n	80070bc <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ffac 	bl	8008000 <USBD_LL_IsStallEP>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	e002      	b.n	80070bc <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2202      	movs	r2, #2
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fb92 	bl	80077ec <USBD_CtlSendData>
              break;
 80070c8:	e004      	b.n	80070d4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fb23 	bl	8007718 <USBD_CtlError>
              break;
 80070d2:	bf00      	nop
          }
          break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fb1d 	bl	8007718 <USBD_CtlError>
          break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e004      	b.n	80070ec <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fb17 	bl	8007718 <USBD_CtlError>
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	885b      	ldrh	r3, [r3, #2]
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	2b06      	cmp	r3, #6
 800711a:	f200 8128 	bhi.w	800736e <USBD_GetDescriptor+0x276>
 800711e:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <USBD_GetDescriptor+0x2c>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	08007141 	.word	0x08007141
 8007128:	08007159 	.word	0x08007159
 800712c:	08007199 	.word	0x08007199
 8007130:	0800736f 	.word	0x0800736f
 8007134:	0800736f 	.word	0x0800736f
 8007138:	0800730f 	.word	0x0800730f
 800713c:	0800733b 	.word	0x0800733b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	7c12      	ldrb	r2, [r2, #16]
 800714c:	f107 0108 	add.w	r1, r7, #8
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
 8007154:	60f8      	str	r0, [r7, #12]
      break;
 8007156:	e112      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	7c1b      	ldrb	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10d      	bne.n	800717c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f107 0208 	add.w	r2, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3301      	adds	r3, #1
 8007176:	2202      	movs	r2, #2
 8007178:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800717a:	e100      	b.n	800737e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	f107 0208 	add.w	r2, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
 800718c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	2202      	movs	r2, #2
 8007194:	701a      	strb	r2, [r3, #0]
      break;
 8007196:	e0f2      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	885b      	ldrh	r3, [r3, #2]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b05      	cmp	r3, #5
 80071a0:	f200 80ac 	bhi.w	80072fc <USBD_GetDescriptor+0x204>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <USBD_GetDescriptor+0xb4>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071c5 	.word	0x080071c5
 80071b0:	080071f9 	.word	0x080071f9
 80071b4:	0800722d 	.word	0x0800722d
 80071b8:	08007261 	.word	0x08007261
 80071bc:	08007295 	.word	0x08007295
 80071c0:	080072c9 	.word	0x080072c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	7c12      	ldrb	r2, [r2, #16]
 80071dc:	f107 0108 	add.w	r1, r7, #8
 80071e0:	4610      	mov	r0, r2
 80071e2:	4798      	blx	r3
 80071e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071e6:	e091      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa94 	bl	8007718 <USBD_CtlError>
            err++;
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	3301      	adds	r3, #1
 80071f4:	72fb      	strb	r3, [r7, #11]
          break;
 80071f6:	e089      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	7c12      	ldrb	r2, [r2, #16]
 8007210:	f107 0108 	add.w	r1, r7, #8
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
 8007218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721a:	e077      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa7a 	bl	8007718 <USBD_CtlError>
            err++;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	3301      	adds	r3, #1
 8007228:	72fb      	strb	r3, [r7, #11]
          break;
 800722a:	e06f      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7c12      	ldrb	r2, [r2, #16]
 8007244:	f107 0108 	add.w	r1, r7, #8
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
 800724c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800724e:	e05d      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fa60 	bl	8007718 <USBD_CtlError>
            err++;
 8007258:	7afb      	ldrb	r3, [r7, #11]
 800725a:	3301      	adds	r3, #1
 800725c:	72fb      	strb	r3, [r7, #11]
          break;
 800725e:	e055      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	7c12      	ldrb	r2, [r2, #16]
 8007278:	f107 0108 	add.w	r1, r7, #8
 800727c:	4610      	mov	r0, r2
 800727e:	4798      	blx	r3
 8007280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007282:	e043      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa46 	bl	8007718 <USBD_CtlError>
            err++;
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	3301      	adds	r3, #1
 8007290:	72fb      	strb	r3, [r7, #11]
          break;
 8007292:	e03b      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7c12      	ldrb	r2, [r2, #16]
 80072ac:	f107 0108 	add.w	r1, r7, #8
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
 80072b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b6:	e029      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa2c 	bl	8007718 <USBD_CtlError>
            err++;
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	3301      	adds	r3, #1
 80072c4:	72fb      	strb	r3, [r7, #11]
          break;
 80072c6:	e021      	b.n	800730c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	7c12      	ldrb	r2, [r2, #16]
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ea:	e00f      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa12 	bl	8007718 <USBD_CtlError>
            err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
          break;
 80072fa:	e007      	b.n	800730c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa0a 	bl	8007718 <USBD_CtlError>
          err++;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	3301      	adds	r3, #1
 8007308:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800730a:	e038      	b.n	800737e <USBD_GetDescriptor+0x286>
 800730c:	e037      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	7c1b      	ldrb	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	f107 0208 	add.w	r2, r7, #8
 8007322:	4610      	mov	r0, r2
 8007324:	4798      	blx	r3
 8007326:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007328:	e029      	b.n	800737e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9f3 	bl	8007718 <USBD_CtlError>
        err++;
 8007332:	7afb      	ldrb	r3, [r7, #11]
 8007334:	3301      	adds	r3, #1
 8007336:	72fb      	strb	r3, [r7, #11]
      break;
 8007338:	e021      	b.n	800737e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7c1b      	ldrb	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10d      	bne.n	800735e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	f107 0208 	add.w	r2, r7, #8
 800734e:	4610      	mov	r0, r2
 8007350:	4798      	blx	r3
 8007352:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	3301      	adds	r3, #1
 8007358:	2207      	movs	r2, #7
 800735a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800735c:	e00f      	b.n	800737e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9d9 	bl	8007718 <USBD_CtlError>
        err++;
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	3301      	adds	r3, #1
 800736a:	72fb      	strb	r3, [r7, #11]
      break;
 800736c:	e007      	b.n	800737e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9d1 	bl	8007718 <USBD_CtlError>
      err++;
 8007376:	7afb      	ldrb	r3, [r7, #11]
 8007378:	3301      	adds	r3, #1
 800737a:	72fb      	strb	r3, [r7, #11]
      break;
 800737c:	bf00      	nop
  }

  if (err != 0U)
 800737e:	7afb      	ldrb	r3, [r7, #11]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11c      	bne.n	80073be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007384:	893b      	ldrh	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d011      	beq.n	80073ae <USBD_GetDescriptor+0x2b6>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	88db      	ldrh	r3, [r3, #6]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00d      	beq.n	80073ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	88da      	ldrh	r2, [r3, #6]
 8007396:	893b      	ldrh	r3, [r7, #8]
 8007398:	4293      	cmp	r3, r2
 800739a:	bf28      	it	cs
 800739c:	4613      	movcs	r3, r2
 800739e:	b29b      	uxth	r3, r3
 80073a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80073a2:	893b      	ldrh	r3, [r7, #8]
 80073a4:	461a      	mov	r2, r3
 80073a6:	68f9      	ldr	r1, [r7, #12]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa1f 	bl	80077ec <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	88db      	ldrh	r3, [r3, #6]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa76 	bl	80078a8 <USBD_CtlSendStatus>
 80073bc:	e000      	b.n	80073c0 <USBD_GetDescriptor+0x2c8>
    return;
 80073be:	bf00      	nop
    }
  }
}
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop

080073c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	889b      	ldrh	r3, [r3, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d130      	bne.n	800743c <USBD_SetAddress+0x74>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	88db      	ldrh	r3, [r3, #6]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d12c      	bne.n	800743c <USBD_SetAddress+0x74>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	885b      	ldrh	r3, [r3, #2]
 80073e6:	2b7f      	cmp	r3, #127	; 0x7f
 80073e8:	d828      	bhi.n	800743c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d104      	bne.n	800740a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f988 	bl	8007718 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007408:	e01c      	b.n	8007444 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7bfa      	ldrb	r2, [r7, #15]
 800740e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fe1e 	bl	8008058 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa43 	bl	80078a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007430:	e008      	b.n	8007444 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800743a:	e003      	b.n	8007444 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f96a 	bl	8007718 <USBD_CtlError>
  }
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	885b      	ldrh	r3, [r3, #2]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	4b41      	ldr	r3, [pc, #260]	; (8007564 <USBD_SetConfig+0x118>)
 800745e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007460:	4b40      	ldr	r3, [pc, #256]	; (8007564 <USBD_SetConfig+0x118>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d904      	bls.n	8007472 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f954 	bl	8007718 <USBD_CtlError>
 8007470:	e075      	b.n	800755e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007478:	2b02      	cmp	r3, #2
 800747a:	d002      	beq.n	8007482 <USBD_SetConfig+0x36>
 800747c:	2b03      	cmp	r3, #3
 800747e:	d023      	beq.n	80074c8 <USBD_SetConfig+0x7c>
 8007480:	e062      	b.n	8007548 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007482:	4b38      	ldr	r3, [pc, #224]	; (8007564 <USBD_SetConfig+0x118>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01a      	beq.n	80074c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800748a:	4b36      	ldr	r3, [pc, #216]	; (8007564 <USBD_SetConfig+0x118>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2203      	movs	r2, #3
 8007498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800749c:	4b31      	ldr	r3, [pc, #196]	; (8007564 <USBD_SetConfig+0x118>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff f9f4 	bl	8006890 <USBD_SetClassConfig>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d104      	bne.n	80074b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f931 	bl	8007718 <USBD_CtlError>
            return;
 80074b6:	e052      	b.n	800755e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9f5 	bl	80078a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074be:	e04e      	b.n	800755e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f9f1 	bl	80078a8 <USBD_CtlSendStatus>
        break;
 80074c6:	e04a      	b.n	800755e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80074c8:	4b26      	ldr	r3, [pc, #152]	; (8007564 <USBD_SetConfig+0x118>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d112      	bne.n	80074f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80074d8:	4b22      	ldr	r3, [pc, #136]	; (8007564 <USBD_SetConfig+0x118>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80074e2:	4b20      	ldr	r3, [pc, #128]	; (8007564 <USBD_SetConfig+0x118>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff f9f0 	bl	80068ce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9da 	bl	80078a8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80074f4:	e033      	b.n	800755e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80074f6:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <USBD_SetConfig+0x118>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	429a      	cmp	r2, r3
 8007502:	d01d      	beq.n	8007540 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff f9de 	bl	80068ce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007512:	4b14      	ldr	r3, [pc, #80]	; (8007564 <USBD_SetConfig+0x118>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800751c:	4b11      	ldr	r3, [pc, #68]	; (8007564 <USBD_SetConfig+0x118>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff f9b4 	bl	8006890 <USBD_SetClassConfig>
 8007528:	4603      	mov	r3, r0
 800752a:	2b02      	cmp	r3, #2
 800752c:	d104      	bne.n	8007538 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f8f1 	bl	8007718 <USBD_CtlError>
            return;
 8007536:	e012      	b.n	800755e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f9b5 	bl	80078a8 <USBD_CtlSendStatus>
        break;
 800753e:	e00e      	b.n	800755e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f9b1 	bl	80078a8 <USBD_CtlSendStatus>
        break;
 8007546:	e00a      	b.n	800755e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f8e4 	bl	8007718 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007550:	4b04      	ldr	r3, [pc, #16]	; (8007564 <USBD_SetConfig+0x118>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff f9b9 	bl	80068ce <USBD_ClrClassConfig>
        break;
 800755c:	bf00      	nop
    }
  }
}
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	200001c2 	.word	0x200001c2

08007568 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	88db      	ldrh	r3, [r3, #6]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d004      	beq.n	8007584 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f8cb 	bl	8007718 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007582:	e021      	b.n	80075c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758a:	2b01      	cmp	r3, #1
 800758c:	db17      	blt.n	80075be <USBD_GetConfig+0x56>
 800758e:	2b02      	cmp	r3, #2
 8007590:	dd02      	ble.n	8007598 <USBD_GetConfig+0x30>
 8007592:	2b03      	cmp	r3, #3
 8007594:	d00b      	beq.n	80075ae <USBD_GetConfig+0x46>
 8007596:	e012      	b.n	80075be <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3308      	adds	r3, #8
 80075a2:	2201      	movs	r2, #1
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f920 	bl	80077ec <USBD_CtlSendData>
        break;
 80075ac:	e00c      	b.n	80075c8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	3304      	adds	r3, #4
 80075b2:	2201      	movs	r2, #1
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f918 	bl	80077ec <USBD_CtlSendData>
        break;
 80075bc:	e004      	b.n	80075c8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f8a9 	bl	8007718 <USBD_CtlError>
        break;
 80075c6:	bf00      	nop
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e0:	3b01      	subs	r3, #1
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d81e      	bhi.n	8007624 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	88db      	ldrh	r3, [r3, #6]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d004      	beq.n	80075f8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f891 	bl	8007718 <USBD_CtlError>
        break;
 80075f6:	e01a      	b.n	800762e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f043 0202 	orr.w	r2, r3, #2
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	330c      	adds	r3, #12
 8007618:	2202      	movs	r2, #2
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f8e5 	bl	80077ec <USBD_CtlSendData>
      break;
 8007622:	e004      	b.n	800762e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f876 	bl	8007718 <USBD_CtlError>
      break;
 800762c:	bf00      	nop
  }
}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d106      	bne.n	8007656 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f929 	bl	80078a8 <USBD_CtlSendStatus>
  }
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766e:	3b01      	subs	r3, #1
 8007670:	2b02      	cmp	r3, #2
 8007672:	d80b      	bhi.n	800768c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	885b      	ldrh	r3, [r3, #2]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d10c      	bne.n	8007696 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f90f 	bl	80078a8 <USBD_CtlSendStatus>
      }
      break;
 800768a:	e004      	b.n	8007696 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f842 	bl	8007718 <USBD_CtlError>
      break;
 8007694:	e000      	b.n	8007698 <USBD_ClrFeature+0x3a>
      break;
 8007696:	bf00      	nop
  }
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781a      	ldrb	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	785a      	ldrb	r2, [r3, #1]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	3302      	adds	r3, #2
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	3303      	adds	r3, #3
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	4413      	add	r3, r2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	3304      	adds	r3, #4
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b29a      	uxth	r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	3305      	adds	r3, #5
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	021b      	lsls	r3, r3, #8
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	4413      	add	r3, r2
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	3306      	adds	r3, #6
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	3307      	adds	r3, #7
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	b29b      	uxth	r3, r3
 8007706:	4413      	add	r3, r2
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	80da      	strh	r2, [r3, #6]

}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007722:	2180      	movs	r1, #128	; 0x80
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fc2d 	bl	8007f84 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800772a:	2100      	movs	r1, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc29 	bl	8007f84 <USBD_LL_StallEP>
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b086      	sub	sp, #24
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d032      	beq.n	80077b6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f834 	bl	80077be <USBD_GetLen>
 8007756:	4603      	mov	r3, r0
 8007758:	3301      	adds	r3, #1
 800775a:	b29b      	uxth	r3, r3
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	1c5a      	adds	r2, r3, #1
 8007768:	75fa      	strb	r2, [r7, #23]
 800776a:	461a      	mov	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4413      	add	r3, r2
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7812      	ldrb	r2, [r2, #0]
 8007774:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	75fa      	strb	r2, [r7, #23]
 800777c:	461a      	mov	r2, r3
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	4413      	add	r3, r2
 8007782:	2203      	movs	r2, #3
 8007784:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007786:	e012      	b.n	80077ae <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	60fa      	str	r2, [r7, #12]
 800778e:	7dfa      	ldrb	r2, [r7, #23]
 8007790:	1c51      	adds	r1, r2, #1
 8007792:	75f9      	strb	r1, [r7, #23]
 8007794:	4611      	mov	r1, r2
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	440a      	add	r2, r1
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800779e:	7dfb      	ldrb	r3, [r7, #23]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	75fa      	strb	r2, [r7, #23]
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	4413      	add	r3, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e8      	bne.n	8007788 <USBD_GetString+0x4e>
    }
  }
}
 80077b6:	bf00      	nop
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80077be:	b480      	push	{r7}
 80077c0:	b085      	sub	sp, #20
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80077ca:	e005      	b.n	80077d8 <USBD_GetLen+0x1a>
  {
    len++;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	3301      	adds	r3, #1
 80077d0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3301      	adds	r3, #1
 80077d6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f5      	bne.n	80077cc <USBD_GetLen+0xe>
  }

  return len;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr

080077ec <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2202      	movs	r2, #2
 80077fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007802:	88fa      	ldrh	r2, [r7, #6]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800780e:	88fb      	ldrh	r3, [r7, #6]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	2100      	movs	r1, #0
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 fc3e 	bl	8008096 <USBD_LL_Transmit>

  return USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fc2c 	bl	8008096 <USBD_LL_Transmit>

  return USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	4613      	mov	r3, r2
 8007854:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2203      	movs	r2, #3
 800785a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800785e:	88fa      	ldrh	r2, [r7, #6]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007866:	88fa      	ldrh	r2, [r7, #6]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	2100      	movs	r1, #0
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fc31 	bl	80080dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007892:	88fb      	ldrh	r3, [r7, #6]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	2100      	movs	r1, #0
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fc1f 	bl	80080dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2204      	movs	r2, #4
 80078b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80078b8:	2300      	movs	r3, #0
 80078ba:	2200      	movs	r2, #0
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fbe9 	bl	8008096 <USBD_LL_Transmit>

  return USBD_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2205      	movs	r2, #5
 80078da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078de:	2300      	movs	r3, #0
 80078e0:	2200      	movs	r2, #0
 80078e2:	2100      	movs	r1, #0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fbf9 	bl	80080dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078f8:	2200      	movs	r2, #0
 80078fa:	4912      	ldr	r1, [pc, #72]	; (8007944 <MX_USB_DEVICE_Init+0x50>)
 80078fc:	4812      	ldr	r0, [pc, #72]	; (8007948 <MX_USB_DEVICE_Init+0x54>)
 80078fe:	f7fe ff6d 	bl	80067dc <USBD_Init>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007908:	f7f8 ff94 	bl	8000834 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800790c:	490f      	ldr	r1, [pc, #60]	; (800794c <MX_USB_DEVICE_Init+0x58>)
 800790e:	480e      	ldr	r0, [pc, #56]	; (8007948 <MX_USB_DEVICE_Init+0x54>)
 8007910:	f7fe ff8f 	bl	8006832 <USBD_RegisterClass>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800791a:	f7f8 ff8b 	bl	8000834 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800791e:	490c      	ldr	r1, [pc, #48]	; (8007950 <MX_USB_DEVICE_Init+0x5c>)
 8007920:	4809      	ldr	r0, [pc, #36]	; (8007948 <MX_USB_DEVICE_Init+0x54>)
 8007922:	f7fe feef 	bl	8006704 <USBD_CDC_RegisterInterface>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800792c:	f7f8 ff82 	bl	8000834 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007930:	4805      	ldr	r0, [pc, #20]	; (8007948 <MX_USB_DEVICE_Init+0x54>)
 8007932:	f7fe ff97 	bl	8006864 <USBD_Start>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800793c:	f7f8 ff7a 	bl	8000834 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007940:	bf00      	nop
 8007942:	bd80      	pop	{r7, pc}
 8007944:	20000140 	.word	0x20000140
 8007948:	20000508 	.word	0x20000508
 800794c:	2000002c 	.word	0x2000002c
 8007950:	20000130 	.word	0x20000130

08007954 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007958:	2200      	movs	r2, #0
 800795a:	4905      	ldr	r1, [pc, #20]	; (8007970 <CDC_Init_FS+0x1c>)
 800795c:	4805      	ldr	r0, [pc, #20]	; (8007974 <CDC_Init_FS+0x20>)
 800795e:	f7fe fee7 	bl	8006730 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007962:	4905      	ldr	r1, [pc, #20]	; (8007978 <CDC_Init_FS+0x24>)
 8007964:	4803      	ldr	r0, [pc, #12]	; (8007974 <CDC_Init_FS+0x20>)
 8007966:	f7fe fefc 	bl	8006762 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800796a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800796c:	4618      	mov	r0, r3
 800796e:	bd80      	pop	{r7, pc}
 8007970:	20000bb4 	.word	0x20000bb4
 8007974:	20000508 	.word	0x20000508
 8007978:	200007cc 	.word	0x200007cc

0800797c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007980:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007982:	4618      	mov	r0, r3
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
	...

0800798c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
 8007998:	4613      	mov	r3, r2
 800799a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	2b23      	cmp	r3, #35	; 0x23
 80079a0:	d84a      	bhi.n	8007a38 <CDC_Control_FS+0xac>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <CDC_Control_FS+0x1c>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	08007a39 	.word	0x08007a39
 80079ac:	08007a39 	.word	0x08007a39
 80079b0:	08007a39 	.word	0x08007a39
 80079b4:	08007a39 	.word	0x08007a39
 80079b8:	08007a39 	.word	0x08007a39
 80079bc:	08007a39 	.word	0x08007a39
 80079c0:	08007a39 	.word	0x08007a39
 80079c4:	08007a39 	.word	0x08007a39
 80079c8:	08007a39 	.word	0x08007a39
 80079cc:	08007a39 	.word	0x08007a39
 80079d0:	08007a39 	.word	0x08007a39
 80079d4:	08007a39 	.word	0x08007a39
 80079d8:	08007a39 	.word	0x08007a39
 80079dc:	08007a39 	.word	0x08007a39
 80079e0:	08007a39 	.word	0x08007a39
 80079e4:	08007a39 	.word	0x08007a39
 80079e8:	08007a39 	.word	0x08007a39
 80079ec:	08007a39 	.word	0x08007a39
 80079f0:	08007a39 	.word	0x08007a39
 80079f4:	08007a39 	.word	0x08007a39
 80079f8:	08007a39 	.word	0x08007a39
 80079fc:	08007a39 	.word	0x08007a39
 8007a00:	08007a39 	.word	0x08007a39
 8007a04:	08007a39 	.word	0x08007a39
 8007a08:	08007a39 	.word	0x08007a39
 8007a0c:	08007a39 	.word	0x08007a39
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a39 	.word	0x08007a39
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a39 	.word	0x08007a39
 8007a20:	08007a39 	.word	0x08007a39
 8007a24:	08007a39 	.word	0x08007a39
 8007a28:	08007a39 	.word	0x08007a39
 8007a2c:	08007a39 	.word	0x08007a39
 8007a30:	08007a39 	.word	0x08007a39
 8007a34:	08007a39 	.word	0x08007a39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a38:	bf00      	nop
  }

  return (USBD_OK);
 8007a3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bc80      	pop	{r7}
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop

08007a48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <CDC_Receive_FS+0x24>)
 8007a56:	f7fe fe84 	bl	8006762 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a5a:	4804      	ldr	r0, [pc, #16]	; (8007a6c <CDC_Receive_FS+0x24>)
 8007a5c:	f7fe fe94 	bl	8006788 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000508 	.word	0x20000508

08007a70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	6039      	str	r1, [r7, #0]
 8007a7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2212      	movs	r2, #18
 8007a80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a82:	4b03      	ldr	r3, [pc, #12]	; (8007a90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	2000015c 	.word	0x2000015c

08007a94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	6039      	str	r1, [r7, #0]
 8007a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007aa6:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000170 	.word	0x20000170

08007ab8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	4907      	ldr	r1, [pc, #28]	; (8007aec <USBD_FS_ProductStrDescriptor+0x34>)
 8007ace:	4808      	ldr	r0, [pc, #32]	; (8007af0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ad0:	f7ff fe33 	bl	800773a <USBD_GetString>
 8007ad4:	e004      	b.n	8007ae0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4904      	ldr	r1, [pc, #16]	; (8007aec <USBD_FS_ProductStrDescriptor+0x34>)
 8007ada:	4805      	ldr	r0, [pc, #20]	; (8007af0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007adc:	f7ff fe2d 	bl	800773a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20000f9c 	.word	0x20000f9c
 8007af0:	08008264 	.word	0x08008264

08007af4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b00:	683a      	ldr	r2, [r7, #0]
 8007b02:	4904      	ldr	r1, [pc, #16]	; (8007b14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b04:	4804      	ldr	r0, [pc, #16]	; (8007b18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b06:	f7ff fe18 	bl	800773a <USBD_GetString>
  return USBD_StrDesc;
 8007b0a:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000f9c 	.word	0x20000f9c
 8007b18:	0800827c 	.word	0x0800827c

08007b1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	221a      	movs	r2, #26
 8007b2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b2e:	f000 f843 	bl	8007bb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b32:	4b02      	ldr	r3, [pc, #8]	; (8007b3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000174 	.word	0x20000174

08007b40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d105      	bne.n	8007b5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4907      	ldr	r1, [pc, #28]	; (8007b74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b56:	4808      	ldr	r0, [pc, #32]	; (8007b78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b58:	f7ff fdef 	bl	800773a <USBD_GetString>
 8007b5c:	e004      	b.n	8007b68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4904      	ldr	r1, [pc, #16]	; (8007b74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b62:	4805      	ldr	r0, [pc, #20]	; (8007b78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b64:	f7ff fde9 	bl	800773a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000f9c 	.word	0x20000f9c
 8007b78:	08008290 	.word	0x08008290

08007b7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	4603      	mov	r3, r0
 8007b84:	6039      	str	r1, [r7, #0]
 8007b86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d105      	bne.n	8007b9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4907      	ldr	r1, [pc, #28]	; (8007bb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b92:	4808      	ldr	r0, [pc, #32]	; (8007bb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b94:	f7ff fdd1 	bl	800773a <USBD_GetString>
 8007b98:	e004      	b.n	8007ba4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	4904      	ldr	r1, [pc, #16]	; (8007bb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b9e:	4805      	ldr	r0, [pc, #20]	; (8007bb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ba0:	f7ff fdcb 	bl	800773a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000f9c 	.word	0x20000f9c
 8007bb4:	0800829c 	.word	0x0800829c

08007bb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <Get_SerialNum+0x44>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <Get_SerialNum+0x48>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bca:	4b0e      	ldr	r3, [pc, #56]	; (8007c04 <Get_SerialNum+0x4c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d009      	beq.n	8007bf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bde:	2208      	movs	r2, #8
 8007be0:	4909      	ldr	r1, [pc, #36]	; (8007c08 <Get_SerialNum+0x50>)
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f814 	bl	8007c10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007be8:	2204      	movs	r2, #4
 8007bea:	4908      	ldr	r1, [pc, #32]	; (8007c0c <Get_SerialNum+0x54>)
 8007bec:	68b8      	ldr	r0, [r7, #8]
 8007bee:	f000 f80f 	bl	8007c10 <IntToUnicode>
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	1ffff7e8 	.word	0x1ffff7e8
 8007c00:	1ffff7ec 	.word	0x1ffff7ec
 8007c04:	1ffff7f0 	.word	0x1ffff7f0
 8007c08:	20000176 	.word	0x20000176
 8007c0c:	20000186 	.word	0x20000186

08007c10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]
 8007c26:	e027      	b.n	8007c78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	0f1b      	lsrs	r3, r3, #28
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d80b      	bhi.n	8007c48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	0f1b      	lsrs	r3, r3, #28
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	7dfb      	ldrb	r3, [r7, #23]
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	440b      	add	r3, r1
 8007c40:	3230      	adds	r2, #48	; 0x30
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	e00a      	b.n	8007c5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	0f1b      	lsrs	r3, r3, #28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4619      	mov	r1, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	440b      	add	r3, r1
 8007c58:	3237      	adds	r2, #55	; 0x37
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	3301      	adds	r3, #1
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	3301      	adds	r3, #1
 8007c76:	75fb      	strb	r3, [r7, #23]
 8007c78:	7dfa      	ldrb	r2, [r7, #23]
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d3d3      	bcc.n	8007c28 <IntToUnicode+0x18>
  }
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bc80      	pop	{r7}
 8007c88:	4770      	bx	lr
	...

08007c8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a0d      	ldr	r2, [pc, #52]	; (8007cd0 <HAL_PCD_MspInit+0x44>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d113      	bne.n	8007cc6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <HAL_PCD_MspInit+0x48>)
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	4a0c      	ldr	r2, [pc, #48]	; (8007cd4 <HAL_PCD_MspInit+0x48>)
 8007ca4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ca8:	61d3      	str	r3, [r2, #28]
 8007caa:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <HAL_PCD_MspInit+0x48>)
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2100      	movs	r1, #0
 8007cba:	2014      	movs	r0, #20
 8007cbc:	f7f9 fb71 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007cc0:	2014      	movs	r0, #20
 8007cc2:	f7f9 fb8a 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	40005c00 	.word	0x40005c00
 8007cd4:	40021000 	.word	0x40021000

08007cd8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007cec:	4619      	mov	r1, r3
 8007cee:	4610      	mov	r0, r2
 8007cf0:	f7fe fe00 	bl	80068f4 <USBD_LL_SetupStage>
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	00db      	lsls	r3, r3, #3
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	4619      	mov	r1, r3
 8007d26:	f7fe fe30 	bl	800698a <USBD_LL_DataOutStage>
}
 8007d2a:	bf00      	nop
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d44:	78fa      	ldrb	r2, [r7, #3]
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	00db      	lsls	r3, r3, #3
 8007d50:	440b      	add	r3, r1
 8007d52:	333c      	adds	r3, #60	; 0x3c
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f7fe fe87 	bl	8006a6c <USBD_LL_DataInStage>
}
 8007d5e:	bf00      	nop
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe ff97 	bl	8006ca8 <USBD_LL_SOF>
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d001      	beq.n	8007d9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d96:	f7f8 fd4d 	bl	8000834 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007da0:	7bfa      	ldrb	r2, [r7, #15]
 8007da2:	4611      	mov	r1, r2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fe ff47 	bl	8006c38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe ff00 	bl	8006bb6 <USBD_LL_Reset>
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe ff41 	bl	8006c56 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ddc:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <HAL_PCD_SuspendCallback+0x30>)
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	4a03      	ldr	r2, [pc, #12]	; (8007df0 <HAL_PCD_SuspendCallback+0x30>)
 8007de2:	f043 0306 	orr.w	r3, r3, #6
 8007de6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	e000ed00 	.word	0xe000ed00

08007df4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe ff3b 	bl	8006c7e <USBD_LL_Resume>
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e18:	4a28      	ldr	r2, [pc, #160]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a26      	ldr	r2, [pc, #152]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e28:	4b24      	ldr	r3, [pc, #144]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e2a:	4a25      	ldr	r2, [pc, #148]	; (8007ec0 <USBD_LL_Init+0xb0>)
 8007e2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e2e:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e30:	2208      	movs	r2, #8
 8007e32:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e34:	4b21      	ldr	r3, [pc, #132]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e36:	2202      	movs	r2, #2
 8007e38:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e3a:	4b20      	ldr	r3, [pc, #128]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e40:	4b1e      	ldr	r3, [pc, #120]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e46:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e4c:	481b      	ldr	r0, [pc, #108]	; (8007ebc <USBD_LL_Init+0xac>)
 8007e4e:	f7f9 fd89 	bl	8001964 <HAL_PCD_Init>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e58:	f7f8 fcec 	bl	8000834 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e62:	2318      	movs	r3, #24
 8007e64:	2200      	movs	r2, #0
 8007e66:	2100      	movs	r1, #0
 8007e68:	f7fb f8bd 	bl	8002fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e72:	2358      	movs	r3, #88	; 0x58
 8007e74:	2200      	movs	r2, #0
 8007e76:	2180      	movs	r1, #128	; 0x80
 8007e78:	f7fb f8b5 	bl	8002fe6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e82:	23c0      	movs	r3, #192	; 0xc0
 8007e84:	2200      	movs	r2, #0
 8007e86:	2181      	movs	r1, #129	; 0x81
 8007e88:	f7fb f8ad 	bl	8002fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e96:	2200      	movs	r2, #0
 8007e98:	2101      	movs	r1, #1
 8007e9a:	f7fb f8a4 	bl	8002fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2182      	movs	r1, #130	; 0x82
 8007eac:	f7fb f89b 	bl	8002fe6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	2000119c 	.word	0x2000119c
 8007ec0:	40005c00 	.word	0x40005c00

08007ec4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7f9 fe4d 	bl	8001b7a <HAL_PCD_Start>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f94e 	bl	8008188 <USBD_Get_USB_Status>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	4608      	mov	r0, r1
 8007f04:	4611      	mov	r1, r2
 8007f06:	461a      	mov	r2, r3
 8007f08:	4603      	mov	r3, r0
 8007f0a:	70fb      	strb	r3, [r7, #3]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70bb      	strb	r3, [r7, #2]
 8007f10:	4613      	mov	r3, r2
 8007f12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f22:	78bb      	ldrb	r3, [r7, #2]
 8007f24:	883a      	ldrh	r2, [r7, #0]
 8007f26:	78f9      	ldrb	r1, [r7, #3]
 8007f28:	f7f9 ffc7 	bl	8001eba <HAL_PCD_EP_Open>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f928 	bl	8008188 <USBD_Get_USB_Status>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fa f80e 	bl	8001f86 <HAL_PCD_EP_Close>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f909 	bl	8008188 <USBD_Get_USB_Status>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fa f8ce 	bl	8002144 <HAL_PCD_EP_SetStall>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f8ea 	bl	8008188 <USBD_Get_USB_Status>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fdc:	78fa      	ldrb	r2, [r7, #3]
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fa f90f 	bl	8002204 <HAL_PCD_EP_ClrStall>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f8cb 	bl	8008188 <USBD_Get_USB_Status>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008012:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008018:	2b00      	cmp	r3, #0
 800801a:	da0c      	bge.n	8008036 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008022:	68f9      	ldr	r1, [r7, #12]
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	440b      	add	r3, r1
 8008030:	3302      	adds	r3, #2
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	e00b      	b.n	800804e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800803c:	68f9      	ldr	r1, [r7, #12]
 800803e:	4613      	mov	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	00db      	lsls	r3, r3, #3
 8008046:	440b      	add	r3, r1
 8008048:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800804c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr

08008058 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	4611      	mov	r1, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7f9 fefa 	bl	8001e70 <HAL_PCD_SetAddress>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 f880 	bl	8008188 <USBD_Get_USB_Status>
 8008088:	4603      	mov	r3, r0
 800808a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800808c:	7bbb      	ldrb	r3, [r7, #14]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b086      	sub	sp, #24
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	461a      	mov	r2, r3
 80080a2:	460b      	mov	r3, r1
 80080a4:	72fb      	strb	r3, [r7, #11]
 80080a6:	4613      	mov	r3, r2
 80080a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080b8:	893b      	ldrh	r3, [r7, #8]
 80080ba:	7af9      	ldrb	r1, [r7, #11]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	f7f9 fffe 	bl	80020be <HAL_PCD_EP_Transmit>
 80080c2:	4603      	mov	r3, r0
 80080c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f85d 	bl	8008188 <USBD_Get_USB_Status>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	461a      	mov	r2, r3
 80080e8:	460b      	mov	r3, r1
 80080ea:	72fb      	strb	r3, [r7, #11]
 80080ec:	4613      	mov	r3, r2
 80080ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080fe:	893b      	ldrh	r3, [r7, #8]
 8008100:	7af9      	ldrb	r1, [r7, #11]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	f7f9 ff87 	bl	8002016 <HAL_PCD_EP_Receive>
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f83a 	bl	8008188 <USBD_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008118:	7dbb      	ldrb	r3, [r7, #22]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008134:	78fa      	ldrb	r2, [r7, #3]
 8008136:	4611      	mov	r1, r2
 8008138:	4618      	mov	r0, r3
 800813a:	f7f9 ffa9 	bl	8002090 <HAL_PCD_EP_GetRxCount>
 800813e:	4603      	mov	r3, r0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <USBD_static_malloc+0x14>)
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr
 800815c:	200001c4 	.word	0x200001c4

08008160 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]

}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	4770      	bx	lr

08008172 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	2b03      	cmp	r3, #3
 800819a:	d817      	bhi.n	80081cc <USBD_Get_USB_Status+0x44>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <USBD_Get_USB_Status+0x1c>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081bb 	.word	0x080081bb
 80081ac:	080081c1 	.word	0x080081c1
 80081b0:	080081c7 	.word	0x080081c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
    break;
 80081b8:	e00b      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081ba:	2302      	movs	r3, #2
 80081bc:	73fb      	strb	r3, [r7, #15]
    break;
 80081be:	e008      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	e005      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081c6:	2302      	movs	r3, #2
 80081c8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ca:	e002      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081cc:	2302      	movs	r3, #2
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	bf00      	nop
  }
  return usb_status;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop

080081e0 <__libc_init_array>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	2500      	movs	r5, #0
 80081e4:	4e0c      	ldr	r6, [pc, #48]	; (8008218 <__libc_init_array+0x38>)
 80081e6:	4c0d      	ldr	r4, [pc, #52]	; (800821c <__libc_init_array+0x3c>)
 80081e8:	1ba4      	subs	r4, r4, r6
 80081ea:	10a4      	asrs	r4, r4, #2
 80081ec:	42a5      	cmp	r5, r4
 80081ee:	d109      	bne.n	8008204 <__libc_init_array+0x24>
 80081f0:	f000 f822 	bl	8008238 <_init>
 80081f4:	2500      	movs	r5, #0
 80081f6:	4e0a      	ldr	r6, [pc, #40]	; (8008220 <__libc_init_array+0x40>)
 80081f8:	4c0a      	ldr	r4, [pc, #40]	; (8008224 <__libc_init_array+0x44>)
 80081fa:	1ba4      	subs	r4, r4, r6
 80081fc:	10a4      	asrs	r4, r4, #2
 80081fe:	42a5      	cmp	r5, r4
 8008200:	d105      	bne.n	800820e <__libc_init_array+0x2e>
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008208:	4798      	blx	r3
 800820a:	3501      	adds	r5, #1
 800820c:	e7ee      	b.n	80081ec <__libc_init_array+0xc>
 800820e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008212:	4798      	blx	r3
 8008214:	3501      	adds	r5, #1
 8008216:	e7f2      	b.n	80081fe <__libc_init_array+0x1e>
 8008218:	080082c4 	.word	0x080082c4
 800821c:	080082c4 	.word	0x080082c4
 8008220:	080082c4 	.word	0x080082c4
 8008224:	080082c8 	.word	0x080082c8

08008228 <memset>:
 8008228:	4603      	mov	r3, r0
 800822a:	4402      	add	r2, r0
 800822c:	4293      	cmp	r3, r2
 800822e:	d100      	bne.n	8008232 <memset+0xa>
 8008230:	4770      	bx	lr
 8008232:	f803 1b01 	strb.w	r1, [r3], #1
 8008236:	e7f9      	b.n	800822c <memset+0x4>

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
